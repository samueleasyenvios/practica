{"ast":null,"code":"const groupByFields = (array, f) => {\n  /*\n  params description :\n      f : function which returnf the array of fields \n      e.g. :  (item) => {\n          return [itemField1, itemField2];\n      }\n      array : array of data to group e.g. : [{...}, {...}]       \n  */\n  var groups = {};\n  array.forEach(o => {\n    var group = JSON.stringify(f(o));\n    groups[group] = groups[group] || [];\n    groups[group].push(o);\n  });\n  return Object.keys(groups).map(group => {\n    return groups[group];\n  });\n};\n/**\n * split array into chunks\n * @param array - array to split\n * @param chunkSize - chunk size\n * @returns\n */\n\n\nconst splitArray = (array, chunkSize) => {\n  const chunks = Array(Math.ceil(array.length / chunkSize)).fill(1).map((_, index) => index * chunkSize).map(begin => array.slice(begin, begin + chunkSize));\n  return chunks;\n};\n\nexport { groupByFields, splitArray };","map":{"version":3,"sources":["C:/proyecto/practica/src/utils/array.ts"],"names":["groupByFields","array","f","groups","forEach","o","group","JSON","stringify","push","Object","keys","map","splitArray","chunkSize","chunks","Array","Math","ceil","length","fill","_","index","begin","slice"],"mappings":"AAAA,MAAMA,aAAa,GAAG,CAACC,KAAD,EAAoBC,CAApB,KAA2C;AAC7D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACI,MAAIC,MAAgC,GAAG,EAAvC;AACAF,EAAAA,KAAK,CAACG,OAAN,CAAeC,CAAD,IAAO;AACjB,QAAIC,KAAK,GAAGC,IAAI,CAACC,SAAL,CAAeN,CAAC,CAACG,CAAD,CAAhB,CAAZ;AACAF,IAAAA,MAAM,CAACG,KAAD,CAAN,GAAgBH,MAAM,CAACG,KAAD,CAAN,IAAiB,EAAjC;AACAH,IAAAA,MAAM,CAACG,KAAD,CAAN,CAAcG,IAAd,CAAmBJ,CAAnB;AACH,GAJD;AAMA,SAAOK,MAAM,CAACC,IAAP,CAAYR,MAAZ,EAAoBS,GAApB,CAAyBN,KAAD,IAAW;AACtC,WAAOH,MAAM,CAACG,KAAD,CAAb;AACH,GAFM,CAAP;AAGH,CAnBD;AAqBA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMO,UAAU,GAAG,CAACZ,KAAD,EAAoBa,SAApB,KAA0C;AACzD,QAAMC,MAAM,GAAGC,KAAK,CAACC,IAAI,CAACC,IAAL,CAAUjB,KAAK,CAACkB,MAAN,GAAeL,SAAzB,CAAD,CAAL,CACVM,IADU,CACL,CADK,EAEVR,GAFU,CAEN,CAACS,CAAD,EAAIC,KAAJ,KAAcA,KAAK,GAAGR,SAFhB,EAGVF,GAHU,CAGLW,KAAD,IAAWtB,KAAK,CAACuB,KAAN,CAAYD,KAAZ,EAAmBA,KAAK,GAAGT,SAA3B,CAHL,CAAf;AAIA,SAAOC,MAAP;AACH,CAND;;AAQA,SAASf,aAAT,EAAwBa,UAAxB","sourcesContent":["const groupByFields = (array: Array<any>, f: any): Array<any> => {\n    /*\n    params description :\n        f : function which returnf the array of fields \n        e.g. :  (item) => {\n            return [itemField1, itemField2];\n        }\n        array : array of data to group e.g. : [{...}, {...}]       \n    */\n    var groups: { [key: string]: any[] } = {};\n    array.forEach((o) => {\n        var group = JSON.stringify(f(o));\n        groups[group] = groups[group] || [];\n        groups[group].push(o);\n    });\n\n    return Object.keys(groups).map((group) => {\n        return groups[group];\n    });\n};\n\n/**\n * split array into chunks\n * @param array - array to split\n * @param chunkSize - chunk size\n * @returns\n */\nconst splitArray = (array: Array<any>, chunkSize: number) => {\n    const chunks = Array(Math.ceil(array.length / chunkSize))\n        .fill(1)\n        .map((_, index) => index * chunkSize)\n        .map((begin) => array.slice(begin, begin + chunkSize));\n    return chunks;\n};\n\nexport { groupByFields, splitArray };\n"]},"metadata":{},"sourceType":"module"}