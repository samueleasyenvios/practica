{"ast":null,"code":"import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nvar mock = new MockAdapter(axios);\nexport function configureFakeBackend() {\n  let users = [{\n    id: 1,\n    email: 'minton@coderthemes.com',\n    username: 'test',\n    password: 'test',\n    firstName: 'Test',\n    lastName: 'User',\n    role: 'Admin',\n    token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJIeXBlciJ9.P27f7JNBF-vOaJFpkn-upfEh3zSprYfyhTOYhijykdI'\n  }];\n  mock.onPost('/login/').reply(function (config) {\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        // get parameters from post request\n        let params = JSON.parse(config.data); // find if any user matches login credentials\n\n        let filteredUsers = users.filter(user => {\n          return user.email === params.email && user.password === params.password;\n        });\n\n        if (filteredUsers.length) {\n          // if login details are valid return user details and fake jwt token\n          let user = filteredUsers[0];\n          resolve([200, user]);\n        } else {\n          // else return error\n          resolve([401, {\n            message: 'Username or password is incorrect'\n          }]);\n        }\n      }, 1000);\n    });\n  });\n  mock.onPost('/register/').reply(function (config) {\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        // get parameters from post request\n        let params = JSON.parse(config.data); // add new users\n\n        let [firstName, lastName] = params.fullname.split(' ');\n        let newUser = {\n          id: users.length + 1,\n          username: firstName,\n          password: params.password,\n          firstName: firstName,\n          lastName: lastName,\n          role: 'Admin',\n          token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJIeXBlciJ9.P27f7JNBF-vOaJFpkn-upfEh3zSprYfyhTOYhijykdI'\n        };\n        users.push(newUser);\n        resolve([200, newUser]);\n      }, 1000);\n    });\n  });\n  mock.onPost('/forget-password/').reply(function (config) {\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        // get parameters from post request\n        let params = JSON.parse(config.data); // find if any user matches login credentials\n\n        let filteredUsers = users.filter(user => {\n          return user.email === params.email;\n        });\n\n        if (filteredUsers.length) {\n          // if login details are valid return user details and fake jwt token\n          let responseJson = {\n            message: \"We've sent you a link to reset password to your registered email.\"\n          };\n          resolve([200, responseJson]);\n        } else {\n          // else return error\n          resolve([401, {\n            message: 'Sorry, we could not find any registered user with entered username'\n          }]);\n        }\n      }, 1000);\n    });\n  });\n}","map":{"version":3,"sources":["C:/proyecto/practica/src/helpers/fake-backend.ts"],"names":["axios","MockAdapter","mock","configureFakeBackend","users","id","email","username","password","firstName","lastName","role","token","onPost","reply","config","Promise","resolve","reject","setTimeout","params","JSON","parse","data","filteredUsers","filter","user","length","message","fullname","split","newUser","push","responseJson"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\n\ninterface UserData {\n    id: number;\n    email?: string;\n    username: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    role: string;\n    token: string;\n}\n\nvar mock = new MockAdapter(axios);\n\nexport function configureFakeBackend() {\n    let users: UserData[] = [\n        {\n            id: 1,\n            email: 'minton@coderthemes.com',\n            username: 'test',\n            password: 'test',\n            firstName: 'Test',\n            lastName: 'User',\n            role: 'Admin',\n            token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJIeXBlciJ9.P27f7JNBF-vOaJFpkn-upfEh3zSprYfyhTOYhijykdI',\n        },\n    ];\n\n    mock.onPost('/login/').reply(function (config) {\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                // get parameters from post request\n                let params = JSON.parse(config.data);\n\n                // find if any user matches login credentials\n                let filteredUsers = users.filter((user) => {\n                    return user.email === params.email && user.password === params.password;\n                });\n\n                if (filteredUsers.length) {\n                    // if login details are valid return user details and fake jwt token\n                    let user = filteredUsers[0];\n                    resolve([200, user]);\n                } else {\n                    // else return error\n                    resolve([401, { message: 'Username or password is incorrect' }]);\n                }\n            }, 1000);\n        });\n    });\n\n    mock.onPost('/register/').reply(function (config) {\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                // get parameters from post request\n                let params = JSON.parse(config.data);\n\n                // add new users\n                let [firstName, lastName] = params.fullname.split(' ');\n                let newUser: UserData = {\n                    id: users.length + 1,\n                    username: firstName,\n                    password: params.password,\n                    firstName: firstName,\n                    lastName: lastName,\n                    role: 'Admin',\n                    token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJIeXBlciJ9.P27f7JNBF-vOaJFpkn-upfEh3zSprYfyhTOYhijykdI',\n                };\n                users.push(newUser);\n\n                resolve([200, newUser]);\n            }, 1000);\n        });\n    });\n\n    mock.onPost('/forget-password/').reply(function (config) {\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                // get parameters from post request\n                let params = JSON.parse(config.data);\n\n                // find if any user matches login credentials\n                let filteredUsers = users.filter((user) => {\n                    return user.email === params.email;\n                });\n\n                if (filteredUsers.length) {\n                    // if login details are valid return user details and fake jwt token\n                    let responseJson = {\n                        message: \"We've sent you a link to reset password to your registered email.\",\n                    };\n                    resolve([200, responseJson]);\n                } else {\n                    // else return error\n                    resolve([\n                        401,\n                        {\n                            message: 'Sorry, we could not find any registered user with entered username',\n                        },\n                    ]);\n                }\n            }, 1000);\n        });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}