{"ast":null,"code":"var _jsxFileName = \"C:\\\\proyecto\\\\practica\\\\src\\\\pages\\\\uikit\\\\TooltipsPopovers.tsx\";\nimport React from 'react';\nimport { Row, Col, Card, OverlayTrigger, Tooltip, Button, Popover } from 'react-bootstrap'; // components\n\nimport PageTitle from '../../components/PageTitle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PopoverDirection = () => {\n  const directions = [{\n    placement: 'top'\n  }, {\n    placement: 'bottom'\n  }, {\n    placement: 'right'\n  }, {\n    placement: 'left'\n  }];\n\n  const popover = /*#__PURE__*/_jsxDEV(Popover, {\n    id: \"popover-direction\",\n    children: /*#__PURE__*/_jsxDEV(Popover.Body, {\n      children: \"And here's some amazing content. It's very engaging. Right?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"header-title\",\n      children: \"Popovers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sub-header\",\n      children: \"Add small overlays of content, like those on the iPad, to any element for housing secondary information.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-list\",\n      children: [(directions || []).map(item => /*#__PURE__*/_jsxDEV(OverlayTrigger, {\n        trigger: \"click\",\n        placement: item.placement,\n        overlay: /*#__PURE__*/_jsxDEV(Popover, {\n          popper: true,\n          id: `popover-positioned-${item.placement}`,\n          children: /*#__PURE__*/_jsxDEV(Popover.Body, {\n            children: \"Vivamus sagittis lacus vel augue laoreet rutrum faucibus.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 29\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"light\",\n          className: \"me-1\",\n          children: [\"Popover on \", item.placement]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this)\n      }, item.placement, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(OverlayTrigger, {\n        trigger: \"focus\",\n        placement: \"right\",\n        overlay: popover,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          children: \"Dismissible popover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_c = PopoverDirection;\n\nconst TooltipDirection = () => {\n  const directions = [{\n    placement: 'top'\n  }, {\n    placement: 'bottom'\n  }, {\n    placement: 'right'\n  }, {\n    placement: 'left'\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"header-title\",\n      children: \"Tooltips\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sub-header\",\n      children: \"Four options are available: top, right, bottom, and left aligned.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-list\",\n      children: (directions || []).map(item => /*#__PURE__*/_jsxDEV(OverlayTrigger, {\n        placement: item.placement,\n        overlay: /*#__PURE__*/_jsxDEV(Tooltip, {\n          id: `tooltip-${item.placement}`,\n          children: [\"Tooltip on \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: item.placement\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 44\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 29\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"light\",\n          className: \"me-1\",\n          children: [\"Tooltip on \", item.placement]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this)\n      }, item.placement, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_c2 = TooltipDirection;\n\nconst TooltipsPopovers = () => {\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageTitle, {\n      breadCrumbItems: [{\n        label: 'Base UI',\n        path: '/ui/tooltips-popovers'\n      }, {\n        label: 'Tooltips & Popovers',\n        path: '/ui/tooltips-popovers',\n        active: true\n      }],\n      title: 'Tooltips & Popovers'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: /*#__PURE__*/_jsxDEV(PopoverDirection, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: /*#__PURE__*/_jsxDEV(TooltipDirection, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n};\n\n_c3 = TooltipsPopovers;\nexport default TooltipsPopovers;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"PopoverDirection\");\n$RefreshReg$(_c2, \"TooltipDirection\");\n$RefreshReg$(_c3, \"TooltipsPopovers\");","map":{"version":3,"sources":["C:/proyecto/practica/src/pages/uikit/TooltipsPopovers.tsx"],"names":["React","Row","Col","Card","OverlayTrigger","Tooltip","Button","Popover","PageTitle","PopoverDirection","directions","placement","popover","map","item","TooltipDirection","TooltipsPopovers","label","path","active"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Row, Col, Card, OverlayTrigger, Tooltip, Button, Popover, OverlayProps } from 'react-bootstrap';\n\n// components\nimport PageTitle from '../../components/PageTitle';\n\ninterface DirectionsType {\n    placement: OverlayProps['placement'];\n}\n\nconst PopoverDirection = () => {\n    const directions: DirectionsType[] = [\n        { placement: 'top' },\n        { placement: 'bottom' },\n        { placement: 'right' },\n        { placement: 'left' },\n    ];\n\n    const popover = (\n        <Popover id=\"popover-direction\">\n            <Popover.Body>And here's some amazing content. It's very engaging. Right?</Popover.Body>\n        </Popover>\n    );\n\n    return (\n        <>\n            <h4 className=\"header-title\">Popovers</h4>\n            <p className=\"sub-header\">\n                Add small overlays of content, like those on the iPad, to any element for housing secondary information.\n            </p>\n\n            <div className=\"button-list\">\n                {(directions || []).map((item) => (\n                    <OverlayTrigger\n                        trigger=\"click\"\n                        key={item.placement}\n                        placement={item.placement}\n                        overlay={\n                            <Popover popper id={`popover-positioned-${item.placement}`}>\n                                <Popover.Body>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</Popover.Body>\n                            </Popover>\n                        }\n                    >\n                        <Button variant=\"light\" className=\"me-1\">\n                            Popover on {item.placement}\n                        </Button>\n                    </OverlayTrigger>\n                ))}\n\n                <OverlayTrigger trigger=\"focus\" placement=\"right\" overlay={popover}>\n                    <Button>Dismissible popover</Button>\n                </OverlayTrigger>\n            </div>\n        </>\n    );\n};\n\nconst TooltipDirection = () => {\n    const directions: DirectionsType[] = [\n        { placement: 'top' },\n        { placement: 'bottom' },\n        { placement: 'right' },\n        { placement: 'left' },\n    ];\n\n    return (\n        <>\n            <h4 className=\"header-title\">Tooltips</h4>\n            <p className=\"sub-header\">Four options are available: top, right, bottom, and left aligned.</p>\n\n            <div className=\"button-list\">\n                {(directions || []).map((item) => (\n                    <OverlayTrigger\n                        key={item.placement}\n                        placement={item.placement}\n                        overlay={\n                            <Tooltip id={`tooltip-${item.placement}`}>\n                                Tooltip on <strong>{item.placement}</strong>.\n                            </Tooltip>\n                        }\n                    >\n                        <Button variant=\"light\" className=\"me-1\">\n                            Tooltip on {item.placement}\n                        </Button>\n                    </OverlayTrigger>\n                ))}\n            </div>\n        </>\n    );\n};\n\nconst TooltipsPopovers = () => {\n    return (\n        <React.Fragment>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Base UI', path: '/ui/tooltips-popovers' },\n                    {\n                        label: 'Tooltips & Popovers',\n                        path: '/ui/tooltips-popovers',\n                        active: true,\n                    },\n                ]}\n                title={'Tooltips & Popovers'}\n            />\n\n            <Row>\n                <Col xs={12}>\n                    <Card>\n                        <Card.Body>\n                            <PopoverDirection />\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col xs={12}>\n                    <Card>\n                        <Card.Body>\n                            <TooltipDirection />\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </React.Fragment>\n    );\n};\n\nexport default TooltipsPopovers;\n"]},"metadata":{},"sourceType":"module"}