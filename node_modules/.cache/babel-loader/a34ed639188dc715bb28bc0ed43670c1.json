{"ast":null,"code":"var _jsxFileName = \"C:\\\\proyecto\\\\practica\\\\src\\\\components\\\\Spinner.tsx\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * Spinner\n */\nconst Spinner = props => {\n  const children = props.children || null;\n  const Tag = props.tag || 'div';\n  const color = props.color || 'secondary';\n  const size = props.size || '';\n  return /*#__PURE__*/_jsxDEV(Tag, {\n    role: \"status\",\n    className: classNames({\n      'spinner-border': props.type === 'bordered',\n      'spinner-grow': props.type === 'grow'\n    }, [`text-${color}`], {\n      [`avatar-${size}`]: size\n    }, props.className),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Spinner;\nSpinner.defaultProps = {\n  tag: 'div',\n  type: 'bordered'\n};\nexport default Spinner;\n\nvar _c;\n\n$RefreshReg$(_c, \"Spinner\");","map":{"version":3,"sources":["C:/proyecto/practica/src/components/Spinner.tsx"],"names":["React","classNames","Spinner","props","children","Tag","tag","color","size","type","className","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;;AAWA;AACA;AACA;AACA,MAAMC,OAAO,GAAIC,KAAD,IAAyB;AACrC,QAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAN,IAAkB,IAAnC;AACA,QAAMC,GAAQ,GAAGF,KAAK,CAACG,GAAN,IAAa,KAA9B;AACA,QAAMC,KAAK,GAAGJ,KAAK,CAACI,KAAN,IAAe,WAA7B;AACA,QAAMC,IAAI,GAAGL,KAAK,CAACK,IAAN,IAAc,EAA3B;AAEA,sBACI,QAAC,GAAD;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,SAAS,EAAEP,UAAU,CACjB;AACI,wBAAkBE,KAAK,CAACM,IAAN,KAAe,UADrC;AAEI,sBAAgBN,KAAK,CAACM,IAAN,KAAe;AAFnC,KADiB,EAKjB,CAAE,QAAOF,KAAM,EAAf,CALiB,EAMjB;AAAE,OAAE,UAASC,IAAK,EAAhB,GAAoBA;AAAtB,KANiB,EAOjBL,KAAK,CAACO,SAPW,CAFzB;AAAA,cAYKN;AAZL;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CAtBD;;KAAMF,O;AAwBNA,OAAO,CAACS,YAAR,GAAuB;AACnBL,EAAAA,GAAG,EAAE,KADc;AAEnBG,EAAAA,IAAI,EAAE;AAFa,CAAvB;AAKA,eAAeP,OAAf","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\ninterface SpinnerProps {\n    tag?: string;\n    className?: string;\n    size?: 'lg' | 'md' | 'sm';\n    type?: 'bordered' | 'grow';\n    color?: string;\n    children?: any;\n}\n\n/**\n * Spinner\n */\nconst Spinner = (props: SpinnerProps) => {\n    const children = props.children || null;\n    const Tag: any = props.tag || 'div';\n    const color = props.color || 'secondary';\n    const size = props.size || '';\n\n    return (\n        <Tag\n            role=\"status\"\n            className={classNames(\n                {\n                    'spinner-border': props.type === 'bordered',\n                    'spinner-grow': props.type === 'grow',\n                },\n                [`text-${color}`],\n                { [`avatar-${size}`]: size },\n                props.className\n            )}\n        >\n            {children}\n        </Tag>\n    );\n};\n\nSpinner.defaultProps = {\n    tag: 'div',\n    type: 'bordered',\n};\n\nexport default Spinner;\n"]},"metadata":{},"sourceType":"module"}