{"ast":null,"code":"var _jsxFileName = \"C:\\\\proyecto\\\\practica\\\\src\\\\pages\\\\uikit\\\\RangeSliders.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport Nouislider from 'nouislider-react';\nimport 'nouislider/distribute/nouislider.css'; // components\n\nimport PageTitle from '../../components/PageTitle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n// RangeSliders\nconst RangeSliders = () => {\n  _s();\n\n  const [selectedVals, setSelectedVals] = useState({\n    1: {\n      textValue: 20,\n      percent: 20\n    },\n    2: {\n      textValue: 20,\n      percent: 20\n    }\n  });\n  const [selectedRanges, setSelectedRanges] = useState({\n    1: '20-45',\n    2: '20-45'\n  });\n\n  const onSlide = (index, value, percent) => {\n    let selectedValues = { ...selectedVals\n    };\n    selectedValues[index] = {\n      textValue: value[0].toFixed(2),\n      percent: percent[0].toFixed(2)\n    };\n    setSelectedVals(selectedValues);\n  };\n\n  const onSlide2 = (index, value) => {\n    let selectedRange = { ...selectedRanges\n    };\n    selectedRange[index] = value[0].toFixed(2) + '-' + value[1].toFixed(2);\n    setSelectedRanges(selectedRange);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageTitle, {\n      breadCrumbItems: [{\n        label: 'Extended UI',\n        path: '/extended-ui/rangesliders'\n      }, {\n        label: 'Range Slider',\n        path: '/extended-ui/rangesliders',\n        active: true\n      }],\n      title: 'Range Slider'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xl: 6,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"header-title\",\n              children: \"Single\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-muted font-14\",\n              children: \"Slider with single selecrtor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Nouislider, {\n              range: {\n                min: 0,\n                max: 100\n              },\n              start: [20],\n              connect: true,\n              onSlide: (render, handle, value, un, percent) => onSlide(1, value, percent)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"mt-2 mb-0\",\n              children: [\"Value:\", ' ', selectedVals ? /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [selectedVals[1]['textValue'], \", \\xA0\", selectedVals[1]['percent'], \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 37\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xl: 6,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"header-title\",\n              children: \"Range\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-muted font-14\",\n              children: \"Slider with range selecrtor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Nouislider, {\n              range: {\n                min: 10,\n                max: 150\n              },\n              start: [20, 45],\n              connect: true,\n              onSlide: (render, handle, value, un, percent) => onSlide2(1, value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"mt-2 mb-0\",\n              children: [\"Value: \", selectedRanges ? /*#__PURE__*/_jsxDEV(\"span\", {\n                children: selectedRanges[1]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 58\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xl: 6,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"header-title\",\n              children: \"Slider Step\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-muted font-14\",\n              children: \"Slider with step value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Nouislider, {\n              range: {\n                min: 0,\n                max: 100\n              },\n              start: [20],\n              step: 10,\n              connect: true,\n              onSlide: (render, handle, value, un, percent) => onSlide(2, value, percent)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"mt-2 mb-0\",\n              children: [\"Value:\", ' ', selectedVals ? /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [selectedVals[2]['textValue'], \", \\xA0\", selectedVals[2]['percent'], \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 37\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xl: 6,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"header-title\",\n              children: \"Range Slider with Steps\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-muted font-14\",\n              children: \"Slider with range selecrtor with fixed step value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Nouislider, {\n              range: {\n                min: 10,\n                max: 150\n              },\n              start: [20, 45],\n              step: 15,\n              connect: true,\n              onSlide: (render, handle, value, un, percent) => onSlide2(2, value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"mt-2 mb-0\",\n              children: [\"Value: \", selectedRanges ? /*#__PURE__*/_jsxDEV(\"span\", {\n                children: selectedRanges[2]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 58\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(RangeSliders, \"80wbavRLNMfdP2zweYKF3numiJ4=\");\n\n_c = RangeSliders;\nexport default RangeSliders;\n\nvar _c;\n\n$RefreshReg$(_c, \"RangeSliders\");","map":{"version":3,"sources":["C:/proyecto/practica/src/pages/uikit/RangeSliders.tsx"],"names":["React","useState","Row","Col","Card","Nouislider","PageTitle","RangeSliders","selectedVals","setSelectedVals","textValue","percent","selectedRanges","setSelectedRanges","onSlide","index","value","selectedValues","toFixed","onSlide2","selectedRange","label","path","active","min","max","render","handle","un"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport Nouislider from 'nouislider-react';\nimport 'nouislider/distribute/nouislider.css';\n\n// components\nimport PageTitle from '../../components/PageTitle';\n\ninterface SelectedValsType {\n    [key: number]: { textValue: number; percent: number };\n}\n\ninterface SelectedRangesType {\n    [key: number]: string;\n}\n\n// RangeSliders\nconst RangeSliders = () => {\n    const [selectedVals, setSelectedVals] = useState<SelectedValsType>({\n        1: { textValue: 20, percent: 20 },\n        2: { textValue: 20, percent: 20 },\n    });\n    const [selectedRanges, setSelectedRanges] = useState<SelectedRangesType>({\n        1: '20-45',\n        2: '20-45',\n    });\n\n    const onSlide = (index: number, value: any[], percent: any) => {\n        let selectedValues = { ...selectedVals };\n        selectedValues[index] = {\n            textValue: value[0].toFixed(2),\n            percent: percent[0].toFixed(2),\n        };\n        setSelectedVals(selectedValues);\n    };\n\n    const onSlide2 = (index: number, value: any[]) => {\n        let selectedRange = { ...selectedRanges };\n        selectedRange[index] = value[0].toFixed(2) + '-' + value[1].toFixed(2);\n        setSelectedRanges(selectedRange);\n    };\n\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Extended UI', path: '/extended-ui/rangesliders' },\n                    {\n                        label: 'Range Slider',\n                        path: '/extended-ui/rangesliders',\n                        active: true,\n                    },\n                ]}\n                title={'Range Slider'}\n            />\n\n            <Row>\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Single</h4>\n                            <p className=\"text-muted font-14\">Slider with single selecrtor</p>\n\n                            <Nouislider\n                                range={{ min: 0, max: 100 }}\n                                start={[20]}\n                                connect\n                                onSlide={(render, handle, value, un, percent) => onSlide(1, value, percent)}\n                            />\n                            <p className=\"mt-2 mb-0\">\n                                Value:{' '}\n                                {selectedVals ? (\n                                    <span>\n                                        {selectedVals[1]['textValue']}, &nbsp;\n                                        {selectedVals[1]['percent']}%\n                                    </span>\n                                ) : null}\n                            </p>\n                        </Card.Body>\n                    </Card>\n                </Col>\n\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Range</h4>\n                            <p className=\"text-muted font-14\">Slider with range selecrtor</p>\n\n                            <Nouislider\n                                range={{ min: 10, max: 150 }}\n                                start={[20, 45]}\n                                connect\n                                onSlide={(render, handle, value, un, percent) => onSlide2(1, value)}\n                            />\n                            <p className=\"mt-2 mb-0\">\n                                Value: {selectedRanges ? <span>{selectedRanges[1]}</span> : null}\n                            </p>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Slider Step</h4>\n                            <p className=\"text-muted font-14\">Slider with step value</p>\n\n                            <Nouislider\n                                range={{ min: 0, max: 100 }}\n                                start={[20]}\n                                step={10}\n                                connect\n                                onSlide={(render, handle, value, un, percent) => onSlide(2, value, percent)}\n                            />\n                            <p className=\"mt-2 mb-0\">\n                                Value:{' '}\n                                {selectedVals ? (\n                                    <span>\n                                        {selectedVals[2]['textValue']}, &nbsp;\n                                        {selectedVals[2]['percent']}%\n                                    </span>\n                                ) : null}\n                            </p>\n                        </Card.Body>\n                    </Card>\n                </Col>\n\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Range Slider with Steps</h4>\n                            <p className=\"text-muted font-14\">Slider with range selecrtor with fixed step value</p>\n\n                            <Nouislider\n                                range={{ min: 10, max: 150 }}\n                                start={[20, 45]}\n                                step={15}\n                                connect\n                                onSlide={(render, handle, value, un, percent) => onSlide2(2, value)}\n                            />\n                            <p className=\"mt-2 mb-0\">\n                                Value: {selectedRanges ? <span>{selectedRanges[2]}</span> : null}\n                            </p>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default RangeSliders;\n"]},"metadata":{},"sourceType":"module"}