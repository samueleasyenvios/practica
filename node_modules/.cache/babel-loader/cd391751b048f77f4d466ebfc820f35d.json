{"ast":null,"code":"import getMatchBounds from './getMatchBounds';\nimport getOptionLabel from './getOptionLabel';\n\nfunction getHintText(props) {\n  var activeIndex = props.activeIndex,\n      initialItem = props.initialItem,\n      isFocused = props.isFocused,\n      isMenuShown = props.isMenuShown,\n      labelKey = props.labelKey,\n      multiple = props.multiple,\n      selected = props.selected,\n      text = props.text; // Don't display a hint under the following conditions:\n\n  if ( // No text entered.\n  !text || // The input is not focused.\n  !isFocused || // The menu is hidden.\n  !isMenuShown || // No item in the menu.\n  !initialItem || // The initial item is a custom option.\n  initialItem.customOption || // One of the menu items is active.\n  activeIndex > -1 || // There's already a selection in single-select mode.\n  !!selected.length && !multiple) {\n    return '';\n  }\n\n  var initialItemStr = getOptionLabel(initialItem, labelKey);\n  var bounds = getMatchBounds(initialItemStr.toLowerCase(), text.toLowerCase());\n\n  if (!(bounds && bounds.start === 0)) {\n    return '';\n  } // Text matching is case- and accent-insensitive, so to display the hint\n  // correctly, splice the input string with the hint string.\n\n\n  return text + initialItemStr.slice(bounds.end, initialItemStr.length);\n}\n\nexport default getHintText;","map":{"version":3,"sources":["C:/proyecto/practica/node_modules/react-bootstrap-typeahead/es/utils/getHintText.js"],"names":["getMatchBounds","getOptionLabel","getHintText","props","activeIndex","initialItem","isFocused","isMenuShown","labelKey","multiple","selected","text","customOption","length","initialItemStr","bounds","toLowerCase","start","slice","end"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,MAAIC,WAAW,GAAGD,KAAK,CAACC,WAAxB;AAAA,MACIC,WAAW,GAAGF,KAAK,CAACE,WADxB;AAAA,MAEIC,SAAS,GAAGH,KAAK,CAACG,SAFtB;AAAA,MAGIC,WAAW,GAAGJ,KAAK,CAACI,WAHxB;AAAA,MAIIC,QAAQ,GAAGL,KAAK,CAACK,QAJrB;AAAA,MAKIC,QAAQ,GAAGN,KAAK,CAACM,QALrB;AAAA,MAMIC,QAAQ,GAAGP,KAAK,CAACO,QANrB;AAAA,MAOIC,IAAI,GAAGR,KAAK,CAACQ,IAPjB,CAD0B,CAQH;;AAEvB,OAAK;AACL,GAACA,IAAD,IAAS;AACT,GAACL,SADD,IACc;AACd,GAACC,WAFD,IAEgB;AAChB,GAACF,WAHD,IAGgB;AAChBA,EAAAA,WAAW,CAACO,YAJZ,IAI4B;AAC5BR,EAAAA,WAAW,GAAG,CAAC,CALf,IAKoB;AACpB,GAAC,CAACM,QAAQ,CAACG,MAAX,IAAqB,CAACJ,QAPtB,EAOgC;AAC9B,WAAO,EAAP;AACD;;AAED,MAAIK,cAAc,GAAGb,cAAc,CAACI,WAAD,EAAcG,QAAd,CAAnC;AACA,MAAIO,MAAM,GAAGf,cAAc,CAACc,cAAc,CAACE,WAAf,EAAD,EAA+BL,IAAI,CAACK,WAAL,EAA/B,CAA3B;;AAEA,MAAI,EAAED,MAAM,IAAIA,MAAM,CAACE,KAAP,KAAiB,CAA7B,CAAJ,EAAqC;AACnC,WAAO,EAAP;AACD,GA1ByB,CA0BxB;AACF;;;AAGA,SAAON,IAAI,GAAGG,cAAc,CAACI,KAAf,CAAqBH,MAAM,CAACI,GAA5B,EAAiCL,cAAc,CAACD,MAAhD,CAAd;AACD;;AAED,eAAeX,WAAf","sourcesContent":["import getMatchBounds from './getMatchBounds';\nimport getOptionLabel from './getOptionLabel';\n\nfunction getHintText(props) {\n  var activeIndex = props.activeIndex,\n      initialItem = props.initialItem,\n      isFocused = props.isFocused,\n      isMenuShown = props.isMenuShown,\n      labelKey = props.labelKey,\n      multiple = props.multiple,\n      selected = props.selected,\n      text = props.text; // Don't display a hint under the following conditions:\n\n  if ( // No text entered.\n  !text || // The input is not focused.\n  !isFocused || // The menu is hidden.\n  !isMenuShown || // No item in the menu.\n  !initialItem || // The initial item is a custom option.\n  initialItem.customOption || // One of the menu items is active.\n  activeIndex > -1 || // There's already a selection in single-select mode.\n  !!selected.length && !multiple) {\n    return '';\n  }\n\n  var initialItemStr = getOptionLabel(initialItem, labelKey);\n  var bounds = getMatchBounds(initialItemStr.toLowerCase(), text.toLowerCase());\n\n  if (!(bounds && bounds.start === 0)) {\n    return '';\n  } // Text matching is case- and accent-insensitive, so to display the hint\n  // correctly, splice the input string with the hint string.\n\n\n  return text + initialItemStr.slice(bounds.end, initialItemStr.length);\n}\n\nexport default getHintText;"]},"metadata":{},"sourceType":"module"}