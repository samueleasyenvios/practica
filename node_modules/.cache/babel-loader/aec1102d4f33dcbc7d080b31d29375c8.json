{"ast":null,"code":"var _jsxFileName = \"C:\\\\proyecto\\\\practica\\\\src\\\\components\\\\form\\\\FormInput.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n/* Password Input with addons */\nconst PasswordInput = _ref => {\n  _s();\n\n  let {\n    name,\n    placeholder,\n    refCallback,\n    errors,\n    control,\n    register,\n    className,\n    ...otherProps\n  } = _ref;\n  const [showPassword, setShowPassword] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(InputGroup, {\n      className: \"mb-0\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n        type: showPassword ? 'text' : 'password',\n        placeholder: placeholder,\n        name: name,\n        id: name,\n        as: \"input\",\n        ref: r => {\n          if (refCallback) refCallback(r);\n        },\n        className: className,\n        isInvalid: errors && errors[name] ? true : false,\n        ...(register ? register(name) : {}),\n        autoComplete: name,\n        ...otherProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classNames('input-group-text', 'input-group-password', {\n          'show-password': showPassword\n        }),\n        \"data-password\": showPassword ? 'true' : 'false',\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"password-eye\",\n          onClick: () => {\n            setShowPassword(!showPassword);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), errors && errors[name] ? /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n      type: \"invalid\",\n      className: \"d-block\",\n      children: errors[name]['message']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this) : null]\n  }, void 0, true);\n}; // textual form-controlsâ€”like inputs, passwords, textareas etc.\n\n\n_s(PasswordInput, \"daguiRHWMFkqPgCh/ppD7CF5VuQ=\");\n\n_c = PasswordInput;\n\nconst TextualInput = _ref2 => {\n  let {\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: type === 'password' && endIcon ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(PasswordInput, {\n        name: name,\n        placeholder: placeholder,\n        refCallback: refCallback,\n        errors: errors,\n        register: register,\n        className: className,\n        ...otherProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n        type: type,\n        placeholder: placeholder,\n        name: name,\n        as: comp,\n        id: name,\n        ref: r => {\n          if (refCallback) refCallback(r);\n        },\n        className: className,\n        isInvalid: errors && errors[name] ? true : false,\n        ...(register ? register(name) : {}),\n        rows: rows,\n        ...otherProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this), errors && errors[name] ? /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n        type: \"invalid\",\n        className: \"d-block\",\n        children: errors[name]['message']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 25\n      }, this) : null]\n    }, void 0, true)\n  }, void 0, false);\n}; // non-textual checkbox and radio controls\n\n\n_c2 = TextualInput;\n\nconst CheckInput = _ref3 => {\n  let {\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n  } = _ref3;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n      type: type,\n      label: label,\n      name: name,\n      id: name,\n      ref: r => {\n        if (refCallback) refCallback(r);\n      },\n      className: className,\n      isInvalid: errors && errors[name] ? true : false,\n      ...(register ? register(name) : {}),\n      ...otherProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), errors && errors[name] ? /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n      type: \"invalid\",\n      className: \"d-block\",\n      children: errors[name]['message']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 17\n    }, this) : null]\n  }, void 0, true);\n}; // handle select controls\n\n\n_c3 = CheckInput;\n\nconst SelectInput = _ref4 => {\n  let {\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    className,\n    children,\n    refCallback,\n    ...otherProps\n  } = _ref4;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Select, {\n      type: type,\n      label: label,\n      name: name,\n      id: name,\n      ref: r => {\n        if (refCallback) refCallback(r);\n      },\n      children: children,\n      className: className,\n      isInvalid: errors && errors[name] ? true : false,\n      ...(register ? register(name) : {}),\n      ...otherProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this), errors && errors[name] ? /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n      type: \"invalid\",\n      children: errors[name]['message']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 17\n    }, this) : null]\n  }, void 0, true);\n};\n\n_c4 = SelectInput;\n\nconst FormInput = _ref5 => {\n  let {\n    label,\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    rows,\n    ...otherProps\n  } = _ref5;\n  // handle input type\n  const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n  const hasEndIcon = endIcon !== undefined ? endIcon : true;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: type === 'hidden' ? /*#__PURE__*/_jsxDEV(\"input\", {\n      type: type,\n      name: name,\n      ...(register ? register(name) : {}),\n      ...otherProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: type === 'select' ? /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: containerClass,\n        children: [label ? /*#__PURE__*/_jsxDEV(Form.Label, {\n          className: labelClassName,\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 38\n        }, this) : null, /*#__PURE__*/_jsxDEV(SelectInput, {\n          type: type,\n          name: name,\n          placeholder: placeholder,\n          refCallback: refCallback,\n          errors: errors,\n          register: register,\n          comp: comp,\n          className: className,\n          children: children,\n          ...otherProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: type === 'checkbox' || type === 'radio' ? /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: containerClass,\n          children: /*#__PURE__*/_jsxDEV(CheckInput, {\n            type: type,\n            label: label,\n            name: name,\n            placeholder: placeholder,\n            refCallback: refCallback,\n            errors: errors,\n            register: register,\n            comp: comp,\n            className: className,\n            rows: rows,\n            ...otherProps\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: containerClass,\n          children: [label ? /*#__PURE__*/_jsxDEV(Form.Label, {\n            className: labelClassName,\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 46\n          }, this) : null, /*#__PURE__*/_jsxDEV(TextualInput, {\n            type: type,\n            name: name,\n            placeholder: placeholder,\n            endIcon: hasEndIcon,\n            refCallback: refCallback,\n            errors: errors,\n            register: register,\n            comp: comp,\n            className: className,\n            rows: rows,\n            ...otherProps\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 33\n        }, this)\n      }, void 0, false)\n    }, void 0, false)\n  }, void 0, false);\n};\n\n_c5 = FormInput;\nexport default FormInput;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"PasswordInput\");\n$RefreshReg$(_c2, \"TextualInput\");\n$RefreshReg$(_c3, \"CheckInput\");\n$RefreshReg$(_c4, \"SelectInput\");\n$RefreshReg$(_c5, \"FormInput\");","map":{"version":3,"sources":["C:/proyecto/practica/src/components/form/FormInput.tsx"],"names":["React","useState","Form","InputGroup","classNames","PasswordInput","name","placeholder","refCallback","errors","control","register","className","otherProps","showPassword","setShowPassword","r","TextualInput","type","endIcon","comp","rows","CheckInput","label","SelectInput","children","FormInput","labelClassName","containerClass","hasEndIcon","undefined"],"mappings":"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","sourcesContent":["import React, { useState, InputHTMLAttributes } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport { FieldErrors, Control } from 'react-hook-form';\n\ninterface FormInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    endIcon?: boolean;\n    label?: string;\n    type?: string;\n    name: string;\n    comp?: string;\n    placeholder?: string;\n    register?: any;\n    errors?: FieldErrors;\n    control?: Control<any>;\n    className?: string;\n    labelClassName?: string;\n    containerClass?: string;\n    textClassName?: string;\n    refCallback?: any;\n    action?: any;\n    rows?: number;\n}\n\n/* Password Input with addons */\nconst PasswordInput = ({\n    name,\n    placeholder,\n    refCallback,\n    errors,\n    control,\n    register,\n    className,\n    ...otherProps\n}: FormInputProps) => {\n    const [showPassword, setShowPassword] = useState<boolean>(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                    {...otherProps}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}\n                >\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}\n                    ></span>\n                </div>\n            </InputGroup>\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// textual form-controlsâ€”like inputs, passwords, textareas etc.\nconst TextualInput = ({\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            {type === 'password' && endIcon ? (\n                <>\n                    <PasswordInput\n                        name={name}\n                        placeholder={placeholder}\n                        refCallback={refCallback}\n                        errors={errors!}\n                        register={register}\n                        className={className}\n                        {...otherProps}\n                    />\n                </>\n            ) : (\n                <>\n                    <Form.Control\n                        type={type}\n                        placeholder={placeholder}\n                        name={name}\n                        as={comp}\n                        id={name}\n                        ref={(r: HTMLInputElement) => {\n                            if (refCallback) refCallback(r);\n                        }}\n                        className={className}\n                        isInvalid={errors && errors[name] ? true : false}\n                        {...(register ? register(name) : {})}\n                        rows={rows}\n                        {...otherProps}\n                    ></Form.Control>\n\n                    {errors && errors[name] ? (\n                        <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                            {errors[name]['message']}\n                        </Form.Control.Feedback>\n                    ) : null}\n                </>\n            )}\n        </>\n    );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Check\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// handle select controls\nconst SelectInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    className,\n    children,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Select\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                children={children}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    const hasEndIcon = endIcon !== undefined ? endIcon : true;\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'select' ? (\n                        <Form.Group className={containerClass}>\n                            {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                            <SelectInput\n                                type={type}\n                                name={name}\n                                placeholder={placeholder}\n                                refCallback={refCallback}\n                                errors={errors}\n                                register={register}\n                                comp={comp}\n                                className={className}\n                                children={children}\n                                {...otherProps}\n                            />\n                        </Form.Group>\n                    ) : (\n                        <>\n                            {type === 'checkbox' || type === 'radio' ? (\n                                <Form.Group className={containerClass}>\n                                    <CheckInput\n                                        type={type}\n                                        label={label}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            ) : (\n                                <Form.Group className={containerClass}>\n                                    {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                    <TextualInput\n                                        type={type}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        endIcon={hasEndIcon}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n"]},"metadata":{},"sourceType":"module"}