{"ast":null,"code":"var _jsxFileName = \"C:\\\\proyecto\\\\practica\\\\src\\\\layouts\\\\Horizontal\\\\Menu.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { Link, useLocation } from 'react-router-dom';\nimport classNames from 'classnames'; // helpers\n\nimport { findAllParent, findMenuItem } from '../../helpers/menu'; // constants\n\n// utils\nimport { splitArray } from '../../utils/'; // custom hook\n\nimport { useViewport } from '../../hooks/';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MenuItemWithChildren = _ref => {\n  _s();\n\n  let {\n    item,\n    tag,\n    linkClassName,\n    className,\n    subMenuClassNames,\n    activeMenuItems,\n    toggleMenu\n  } = _ref;\n  const Tag = tag;\n  const {\n    width\n  } = useViewport();\n  const [open, setOpen] = useState(activeMenuItems.includes(item.key));\n  const showMenu = width <= 768 && open;\n  const hasChild = item.children && (item.children || []).filter(child => {\n    var _child$children;\n\n    return ((_child$children = child.children) === null || _child$children === void 0 ? void 0 : _child$children.length) && child.children;\n  });\n  const hasGrandChild = !(hasChild.length > 0 && hasChild) && item.children.length >= 15;\n  let chunks = hasGrandChild ? splitArray(item.children, 7) : [];\n  useEffect(() => {\n    setOpen(activeMenuItems.includes(item.key));\n  }, [activeMenuItems, item]);\n  /**\n   * toggles the menu\n   */\n\n  const toggleMenuItem = e => {\n    e.preventDefault();\n    const status = !open;\n    setOpen(status);\n    if (toggleMenu) toggleMenu(item, status);\n    return false;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Tag, {\n    className: classNames('dropdown', className, activeMenuItems.includes(item.key) ? 'active' : ''),\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/#\",\n      onClick: toggleMenuItem,\n      \"data-menu-key\": item.key,\n      className: classNames('dropdown-toggle', linkClassName, {\n        active: activeMenuItems.includes(item.key)\n      }),\n      id: item.key,\n      role: \"button\",\n      \"data-bs-toggle\": \"dropdown\",\n      \"aria-haspopup\": \"true\",\n      \"aria-expanded\": open,\n      children: [item.icon && /*#__PURE__*/_jsxDEV(\"i\", {\n        className: classNames(item.icon, 'me-1')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 31\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\" \", item.label, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"arrow-down\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), item.children && (hasGrandChild ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classNames(subMenuClassNames, 'mega-dropdown-menu dropdown-mega-menu-xl', {\n        show: showMenu\n      }),\n      \"aria-labelledby\": item.key,\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: (chunks || []).map((child, i) => {\n          return /*#__PURE__*/_jsxDEV(Col, {\n            lg: 4,\n            children: /*#__PURE__*/_jsxDEV(MegaMenu, {\n              item: child,\n              activeMenuItems: activeMenuItems\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 41\n            }, this)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 37\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classNames(subMenuClassNames, {\n        show: showMenu\n      }),\n      \"aria-labelledby\": item.key,\n      children: (item.children || []).map((child, i) => {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: child.children ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(MenuItemWithChildren, {\n              item: child,\n              tag: \"div\",\n              linkClassName: classNames('dropdown-item', activeMenuItems.includes(child.key) ? 'active' : ''),\n              activeMenuItems: activeMenuItems,\n              className: \"\",\n              subMenuClassNames: \"dropdown-menu\",\n              toggleMenu: toggleMenu\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 45\n            }, this)\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(MenuItemLink, {\n              item: child,\n              className: classNames('dropdown-item', {\n                active: activeMenuItems.includes(child.key)\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 45\n            }, this)\n          }, void 0, false)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 33\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MenuItemWithChildren, \"82EUorP+ouu5HHgUZGHjqgnBkxQ=\", false, function () {\n  return [useViewport];\n});\n\n_c = MenuItemWithChildren;\n\nconst MenuItem = _ref2 => {\n  let {\n    item,\n    className,\n    linkClassName\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: classNames('nav-item', className),\n    children: /*#__PURE__*/_jsxDEV(MenuItemLink, {\n      item: item,\n      className: linkClassName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = MenuItem;\n\nconst MenuItemLink = _ref3 => {\n  let {\n    item,\n    className\n  } = _ref3;\n  return /*#__PURE__*/_jsxDEV(Link, {\n    to: item.url,\n    target: item.target,\n    className: classNames(className),\n    \"data-menu-key\": item.key,\n    children: [item.icon && /*#__PURE__*/_jsxDEV(\"i\", {\n      className: classNames(item.icon, 'me-1')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\" \", item.label, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 9\n  }, this);\n};\n\n_c3 = MenuItemLink;\n\nconst MegaMenu = _ref4 => {\n  let {\n    item,\n    activeMenuItems\n  } = _ref4;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: item.map((child, i) => {\n      return /*#__PURE__*/_jsxDEV(MenuItemLink, {\n        item: child,\n        className: classNames('dropdown-item', {\n          active: activeMenuItems.includes(child.key)\n        })\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false);\n};\n/**\n * Renders the application menu\n */\n\n\n_c4 = MegaMenu;\n\nconst AppMenu = _ref5 => {\n  _s2();\n\n  let {\n    menuItems\n  } = _ref5;\n  let location = useLocation();\n  const menuRef = useRef(null);\n  const [topnavMenuItems] = useState(menuItems);\n  const [activeMenuItems, setActiveMenuItems] = useState([]);\n  /*\n   * toggle the menus\n   */\n\n  const toggleMenu = (menuItem, show) => {\n    if (show) setActiveMenuItems([menuItem['key'], ...findAllParent(topnavMenuItems, menuItem)]);\n  };\n  /**\n   * activate the menuitems\n   */\n\n\n  const activeMenu = useCallback(() => {\n    const div = document.getElementById('main-side-menu');\n    let matchingMenuItem = null;\n\n    if (div) {\n      let items = div.getElementsByTagName('a');\n\n      for (let i = 0; i < items.length; ++i) {\n        if (location.pathname === items[i].pathname) {\n          matchingMenuItem = items[i];\n          break;\n        }\n      }\n\n      if (matchingMenuItem) {\n        const mid = matchingMenuItem.getAttribute('data-menu-key');\n        const activeMt = findMenuItem(topnavMenuItems, mid);\n\n        if (activeMt) {\n          setActiveMenuItems([activeMt['key'], ...findAllParent(topnavMenuItems, activeMt)]);\n        }\n      }\n    }\n  }, [location.pathname, topnavMenuItems]);\n  useEffect(() => {\n    if (topnavMenuItems && topnavMenuItems.length > 0) activeMenu();\n  }, [activeMenu, topnavMenuItems]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"navbar-nav\",\n      ref: menuRef,\n      id: \"main-side-menu\",\n      children: (topnavMenuItems || []).map((item, idx) => {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: item.children ? /*#__PURE__*/_jsxDEV(MenuItemWithChildren, {\n            item: item,\n            tag: \"li\",\n            className: \"nav-item\",\n            subMenuClassNames: \"dropdown-menu\",\n            activeMenuItems: activeMenuItems,\n            linkClassName: \"nav-link\",\n            toggleMenu: toggleMenu\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(MenuItem, {\n            item: item,\n            linkClassName: classNames('nav-link', 'dropdown-toggle', {\n              active: activeMenuItems.includes(item.key)\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 33\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s2(AppMenu, \"9vwxf6IpuBxUXrJsg26N406qztg=\", false, function () {\n  return [useLocation];\n});\n\n_c5 = AppMenu;\nexport default AppMenu;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"MenuItemWithChildren\");\n$RefreshReg$(_c2, \"MenuItem\");\n$RefreshReg$(_c3, \"MenuItemLink\");\n$RefreshReg$(_c4, \"MegaMenu\");\n$RefreshReg$(_c5, \"AppMenu\");","map":{"version":3,"sources":["C:/proyecto/practica/src/layouts/Horizontal/Menu.tsx"],"names":["React","useEffect","useRef","useState","useCallback","Col","Row","Link","useLocation","classNames","findAllParent","findMenuItem","splitArray","useViewport","MenuItemWithChildren","item","tag","linkClassName","className","subMenuClassNames","activeMenuItems","toggleMenu","Tag","width","open","setOpen","includes","key","showMenu","hasChild","children","filter","child","length","hasGrandChild","chunks","toggleMenuItem","e","preventDefault","status","active","icon","label","show","map","i","MenuItem","MenuItemLink","url","target","MegaMenu","AppMenu","menuItems","location","menuRef","topnavMenuItems","setActiveMenuItems","menuItem","activeMenu","div","document","getElementById","matchingMenuItem","items","getElementsByTagName","pathname","mid","getAttribute","activeMt","idx"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { Link, useLocation } from 'react-router-dom';\nimport classNames from 'classnames';\n\n// helpers\nimport { findAllParent, findMenuItem } from '../../helpers/menu';\n\n// constants\nimport { MenuItemTypes } from '../../constants/menu';\n\n// utils\nimport { splitArray } from '../../utils/';\n\n// custom hook\nimport { useViewport } from '../../hooks/';\n\ninterface MenuItems {\n    item: MenuItemTypes;\n    tag?: string;\n    linkClassName?: string;\n    className?: string;\n    subMenuClassNames?: string;\n    activeMenuItems?: string[];\n    toggleMenu?: (item: any, status: boolean) => void;\n}\n\nconst MenuItemWithChildren = ({\n    item,\n    tag,\n    linkClassName,\n    className,\n    subMenuClassNames,\n    activeMenuItems,\n    toggleMenu,\n}: MenuItems) => {\n    const Tag: any = tag;\n    const { width } = useViewport();\n\n    const [open, setOpen] = useState<boolean>(activeMenuItems!.includes(item.key));\n\n    const showMenu = width <= 768 && open;\n\n    const hasChild = item.children && (item.children || []).filter((child) => child.children?.length && child.children);\n\n    const hasGrandChild = !(hasChild!.length > 0 && hasChild) && item.children!.length >= 15;\n\n    let chunks: any[] = hasGrandChild ? splitArray(item.children!, 7) : [];\n\n    useEffect(() => {\n        setOpen(activeMenuItems!.includes(item.key));\n    }, [activeMenuItems, item]);\n\n    /**\n     * toggles the menu\n     */\n    const toggleMenuItem = (e: any) => {\n        e.preventDefault();\n        const status = !open;\n        setOpen(status);\n        if (toggleMenu) toggleMenu(item, status);\n        return false;\n    };\n\n    return (\n        <Tag className={classNames('dropdown', className, activeMenuItems!.includes(item.key) ? 'active' : '')}>\n            <Link\n                to=\"/#\"\n                onClick={toggleMenuItem}\n                data-menu-key={item.key}\n                className={classNames('dropdown-toggle', linkClassName, {\n                    active: activeMenuItems!.includes(item.key),\n                })}\n                id={item.key}\n                role=\"button\"\n                data-bs-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded={open}\n            >\n                {item.icon && <i className={classNames(item.icon, 'me-1')} />}\n                <span> {item.label} </span>\n                <div className=\"arrow-down\"></div>\n            </Link>\n\n            {item.children &&\n                (hasGrandChild ? (\n                    <div\n                        className={classNames(subMenuClassNames, 'mega-dropdown-menu dropdown-mega-menu-xl', {\n                            show: showMenu,\n                        })}\n                        aria-labelledby={item.key}\n                    >\n                        <Row>\n                            {(chunks || []).map((child, i) => {\n                                return (\n                                    <Col key={i} lg={4}>\n                                        <MegaMenu item={child} activeMenuItems={activeMenuItems!} />\n                                    </Col>\n                                );\n                            })}\n                        </Row>\n                    </div>\n                ) : (\n                    <div className={classNames(subMenuClassNames, { show: showMenu })} aria-labelledby={item.key}>\n                        {(item.children || []).map((child, i) => {\n                            return (\n                                <React.Fragment key={i}>\n                                    {child.children ? (\n                                        <>\n                                            {/* parent */}\n                                            <MenuItemWithChildren\n                                                item={child}\n                                                tag=\"div\"\n                                                linkClassName={classNames(\n                                                    'dropdown-item',\n                                                    activeMenuItems!.includes(child.key) ? 'active' : ''\n                                                )}\n                                                activeMenuItems={activeMenuItems}\n                                                className=\"\"\n                                                subMenuClassNames=\"dropdown-menu\"\n                                                toggleMenu={toggleMenu}\n                                            />\n                                        </>\n                                    ) : (\n                                        <>\n                                            {/* child */}\n                                            <MenuItemLink\n                                                item={child}\n                                                className={classNames('dropdown-item', {\n                                                    active: activeMenuItems!.includes(child.key),\n                                                })}\n                                            />\n                                        </>\n                                    )}\n                                </React.Fragment>\n                            );\n                        })}\n                    </div>\n                ))}\n        </Tag>\n    );\n};\n\nconst MenuItem = ({ item, className, linkClassName }: MenuItems) => {\n    return (\n        <li className={classNames('nav-item', className)}>\n            <MenuItemLink item={item} className={linkClassName} />\n        </li>\n    );\n};\n\nconst MenuItemLink = ({ item, className }: MenuItems) => {\n    return (\n        <Link to={item.url!} target={item.target} className={classNames(className)} data-menu-key={item.key}>\n            {item.icon && <i className={classNames(item.icon, 'me-1')} />}\n            <span> {item.label} </span>\n        </Link>\n    );\n};\n\ninterface MegaMenuProps {\n    item: MenuItemTypes[];\n    activeMenuItems: string[];\n}\n\nconst MegaMenu = ({ item, activeMenuItems }: MegaMenuProps) => {\n    return (\n        <>\n            {item.map((child, i) => {\n                return (\n                    <MenuItemLink\n                        key={i}\n                        item={child}\n                        className={classNames('dropdown-item', {\n                            active: activeMenuItems!.includes(child.key),\n                        })}\n                    />\n                );\n            })}\n        </>\n    );\n};\n\n/**\n * Renders the application menu\n */\n\ninterface AppMenuProps {\n    menuItems: MenuItemTypes[];\n}\n\nconst AppMenu = ({ menuItems }: AppMenuProps) => {\n    let location = useLocation();\n    const menuRef = useRef(null);\n\n    const [topnavMenuItems] = useState<MenuItemTypes[]>(menuItems);\n    const [activeMenuItems, setActiveMenuItems] = useState<string[]>([]);\n\n    /*\n     * toggle the menus\n     */\n    const toggleMenu = (menuItem: MenuItemTypes, show: boolean) => {\n        if (show) setActiveMenuItems([menuItem['key'], ...findAllParent(topnavMenuItems, menuItem)]);\n    };\n\n    /**\n     * activate the menuitems\n     */\n    const activeMenu = useCallback(() => {\n        const div = document.getElementById('main-side-menu');\n        let matchingMenuItem = null;\n\n        if (div) {\n            let items: any = div.getElementsByTagName('a');\n            for (let i: number = 0; i < items.length; ++i) {\n                if (location.pathname === items[i].pathname) {\n                    matchingMenuItem = items[i];\n                    break;\n                }\n            }\n\n            if (matchingMenuItem) {\n                const mid = matchingMenuItem.getAttribute('data-menu-key');\n                const activeMt = findMenuItem(topnavMenuItems, mid);\n                if (activeMt) {\n                    setActiveMenuItems([activeMt['key'], ...findAllParent(topnavMenuItems, activeMt)]);\n                }\n            }\n        }\n    }, [location.pathname, topnavMenuItems]);\n\n    useEffect(() => {\n        if (topnavMenuItems && topnavMenuItems.length > 0) activeMenu();\n    }, [activeMenu, topnavMenuItems]);\n\n    return (\n        <>\n            <ul className=\"navbar-nav\" ref={menuRef} id=\"main-side-menu\">\n                {(topnavMenuItems || []).map((item, idx) => {\n                    return (\n                        <React.Fragment key={idx}>\n                            {item.children ? (\n                                <MenuItemWithChildren\n                                    item={item}\n                                    tag=\"li\"\n                                    className=\"nav-item\"\n                                    subMenuClassNames=\"dropdown-menu\"\n                                    activeMenuItems={activeMenuItems}\n                                    linkClassName=\"nav-link\"\n                                    toggleMenu={toggleMenu}\n                                />\n                            ) : (\n                                <MenuItem\n                                    item={item}\n                                    linkClassName={classNames('nav-link', 'dropdown-toggle', {\n                                        active: activeMenuItems.includes(item.key),\n                                    })}\n                                />\n                            )}\n                        </React.Fragment>\n                    );\n                })}\n            </ul>\n        </>\n    );\n};\n\nexport default AppMenu;\n"]},"metadata":{},"sourceType":"module"}