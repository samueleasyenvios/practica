{"ast":null,"code":"var _jsxFileName = \"C:\\\\proyecto\\\\practica\\\\src\\\\components\\\\topbar\\\\MaximizeScreen.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Dropdown } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MaximizeScreen = () => {\n  _s();\n\n  useEffect(() => {\n    let elem = document.querySelector('.maximize-icon');\n    if (elem) elem.setAttribute('data-toggle', 'fullscreen');\n    return () => {\n      if (elem) elem.removeAttribute('data-toggle');\n    };\n  }, []);\n  /*\n   * toggle full screen mode\n   */\n\n  const toggleFullscreen = () => {\n    let document = window.document;\n    document.body.classList.add('fullscreen-enable');\n\n    if (!document.fullscreenElement &&\n    /* alternative standard method */\n    !document.mozFullScreenElement && !document.webkitFullscreenElement) {\n      // current working methods\n      if (document.documentElement.requestFullscreen) {\n        document.documentElement.requestFullscreen();\n      } else if (document.documentElement.mozRequestFullScreen) {\n        document.documentElement.mozRequestFullScreen();\n      } else if (document.documentElement.webkitRequestFullscreen) {\n        document.documentElement.webkitRequestFullscreen();\n      }\n    } else {\n      if (document.cancelFullScreen) {\n        document.cancelFullScreen();\n      } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n      } else if (document.webkitCancelFullScreen) {\n        document.webkitCancelFullScreen();\n      }\n    } // handle fullscreen exit\n\n\n    const exitHandler = () => {\n      if (!document.webkitIsFullScreen && !document.mozFullScreen && !document.msFullscreenElement) document.body.classList.remove('fullscreen-enable');\n    };\n\n    document.addEventListener('fullscreenchange', exitHandler);\n    document.addEventListener('webkitfullscreenchange', exitHandler);\n    document.addEventListener('mozfullscreenchange', exitHandler);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dropdown, {\n    children: /*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n      id: \"dropdown-languages\",\n      as: \"a\",\n      onClick: toggleFullscreen,\n      className: \"nav-link arrow-none waves-effect waves-light maximize-icon\",\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fe-maximize noti-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MaximizeScreen, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = MaximizeScreen;\nexport default MaximizeScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"MaximizeScreen\");","map":{"version":3,"sources":["C:/proyecto/practica/src/components/topbar/MaximizeScreen.tsx"],"names":["React","useEffect","Dropdown","MaximizeScreen","elem","document","querySelector","setAttribute","removeAttribute","toggleFullscreen","window","body","classList","add","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","documentElement","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","cancelFullScreen","mozCancelFullScreen","webkitCancelFullScreen","exitHandler","webkitIsFullScreen","mozFullScreen","msFullscreenElement","remove","addEventListener"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,iBAAzB;;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AACzBF,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIG,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,gBAAvB,CAAX;AAEA,QAAIF,IAAJ,EAAUA,IAAI,CAACG,YAAL,CAAkB,aAAlB,EAAiC,YAAjC;AAEV,WAAO,MAAM;AACT,UAAIH,IAAJ,EAAUA,IAAI,CAACI,eAAL,CAAqB,aAArB;AACb,KAFD;AAGH,GARQ,EAQN,EARM,CAAT;AAUA;AACJ;AACA;;AACI,QAAMC,gBAAgB,GAAG,MAAM;AAC3B,QAAIJ,QAAa,GAAGK,MAAM,CAACL,QAA3B;AACAA,IAAAA,QAAQ,CAACM,IAAT,CAAcC,SAAd,CAAwBC,GAAxB,CAA4B,mBAA5B;;AAEA,QACI,CAACR,QAAQ,CAACS,iBAAV;AACA;AAAkC,KAACT,QAAQ,CAACU,oBAD5C,IAEA,CAACV,QAAQ,CAACW,uBAHd,EAIE;AACE;AACA,UAAIX,QAAQ,CAACY,eAAT,CAAyBC,iBAA7B,EAAgD;AAC5Cb,QAAAA,QAAQ,CAACY,eAAT,CAAyBC,iBAAzB;AACH,OAFD,MAEO,IAAIb,QAAQ,CAACY,eAAT,CAAyBE,oBAA7B,EAAmD;AACtDd,QAAAA,QAAQ,CAACY,eAAT,CAAyBE,oBAAzB;AACH,OAFM,MAEA,IAAId,QAAQ,CAACY,eAAT,CAAyBG,uBAA7B,EAAsD;AACzDf,QAAAA,QAAQ,CAACY,eAAT,CAAyBG,uBAAzB;AACH;AACJ,KAbD,MAaO;AACH,UAAIf,QAAQ,CAACgB,gBAAb,EAA+B;AAC3BhB,QAAAA,QAAQ,CAACgB,gBAAT;AACH,OAFD,MAEO,IAAIhB,QAAQ,CAACiB,mBAAb,EAAkC;AACrCjB,QAAAA,QAAQ,CAACiB,mBAAT;AACH,OAFM,MAEA,IAAIjB,QAAQ,CAACkB,sBAAb,EAAqC;AACxClB,QAAAA,QAAQ,CAACkB,sBAAT;AACH;AACJ,KAzB0B,CA2B3B;;;AACA,UAAMC,WAAW,GAAG,MAAM;AACtB,UAAI,CAACnB,QAAQ,CAACoB,kBAAV,IAAgC,CAACpB,QAAQ,CAACqB,aAA1C,IAA2D,CAACrB,QAAQ,CAACsB,mBAAzE,EACItB,QAAQ,CAACM,IAAT,CAAcC,SAAd,CAAwBgB,MAAxB,CAA+B,mBAA/B;AACP,KAHD;;AAIAvB,IAAAA,QAAQ,CAACwB,gBAAT,CAA0B,kBAA1B,EAA8CL,WAA9C;AACAnB,IAAAA,QAAQ,CAACwB,gBAAT,CAA0B,wBAA1B,EAAoDL,WAApD;AACAnB,IAAAA,QAAQ,CAACwB,gBAAT,CAA0B,qBAA1B,EAAiDL,WAAjD;AACH,GAnCD;;AAqCA,sBACI,QAAC,QAAD;AAAA,2BACI,QAAC,QAAD,CAAU,MAAV;AACI,MAAA,EAAE,EAAC,oBADP;AAEI,MAAA,EAAE,EAAC,GAFP;AAGI,MAAA,OAAO,EAAEf,gBAHb;AAII,MAAA,SAAS,EAAC,4DAJd;AAAA,6BAMI;AAAG,QAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CA/DD;;GAAMN,c;;KAAAA,c;AAiEN,eAAeA,cAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { Dropdown } from 'react-bootstrap';\n\nconst MaximizeScreen = () => {\n    useEffect(() => {\n        let elem = document.querySelector('.maximize-icon');\n\n        if (elem) elem.setAttribute('data-toggle', 'fullscreen');\n\n        return () => {\n            if (elem) elem.removeAttribute('data-toggle');\n        };\n    }, []);\n\n    /*\n     * toggle full screen mode\n     */\n    const toggleFullscreen = () => {\n        let document: any = window.document;\n        document.body.classList.add('fullscreen-enable');\n\n        if (\n            !document.fullscreenElement &&\n            /* alternative standard method */ !document.mozFullScreenElement &&\n            !document.webkitFullscreenElement\n        ) {\n            // current working methods\n            if (document.documentElement.requestFullscreen) {\n                document.documentElement.requestFullscreen();\n            } else if (document.documentElement.mozRequestFullScreen) {\n                document.documentElement.mozRequestFullScreen();\n            } else if (document.documentElement.webkitRequestFullscreen) {\n                document.documentElement.webkitRequestFullscreen();\n            }\n        } else {\n            if (document.cancelFullScreen) {\n                document.cancelFullScreen();\n            } else if (document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n            } else if (document.webkitCancelFullScreen) {\n                document.webkitCancelFullScreen();\n            }\n        }\n\n        // handle fullscreen exit\n        const exitHandler = () => {\n            if (!document.webkitIsFullScreen && !document.mozFullScreen && !document.msFullscreenElement)\n                document.body.classList.remove('fullscreen-enable');\n        };\n        document.addEventListener('fullscreenchange', exitHandler);\n        document.addEventListener('webkitfullscreenchange', exitHandler);\n        document.addEventListener('mozfullscreenchange', exitHandler);\n    };\n\n    return (\n        <Dropdown>\n            <Dropdown.Toggle\n                id=\"dropdown-languages\"\n                as=\"a\"\n                onClick={toggleFullscreen}\n                className=\"nav-link arrow-none waves-effect waves-light maximize-icon\"\n            >\n                <i className=\"fe-maximize noti-icon\"></i>\n            </Dropdown.Toggle>\n        </Dropdown>\n    );\n};\n\nexport default MaximizeScreen;\n"]},"metadata":{},"sourceType":"module"}