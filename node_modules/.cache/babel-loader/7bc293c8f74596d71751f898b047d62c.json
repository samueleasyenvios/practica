{"ast":null,"code":"import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\n// apicore\nimport { APICore, setAuthorization } from '../../helpers/api/apiCore'; // helpers\n\nimport { login as loginApi, logout as logoutApi, signup as signupApi, forgotPassword as forgotPasswordApi } from '../../helpers/'; // actions\n\nimport { authApiResponseSuccess, authApiResponseError } from './actions'; // constants\n\nimport { AuthActionTypes } from './constants';\nconst api = new APICore();\n/**\n * Login the user\n * @param {*} payload - username and password\n */\n\nfunction* login(_ref) {\n  let {\n    payload: {\n      email,\n      password\n    },\n    type\n  } = _ref;\n\n  try {\n    const response = yield call(loginApi, {\n      email,\n      password\n    });\n    const user = response.data; // NOTE - You can change this according to response format from your api\n\n    api.setLoggedInUser(user);\n    setAuthorization(user['token']);\n    yield put(authApiResponseSuccess(AuthActionTypes.LOGIN_USER, user));\n  } catch (error) {\n    yield put(authApiResponseError(AuthActionTypes.LOGIN_USER, error));\n    api.setLoggedInUser(null);\n    setAuthorization(null);\n  }\n}\n/**\n * Logout the user\n */\n\n\nfunction* logout() {\n  try {\n    yield call(logoutApi);\n    api.setLoggedInUser(null);\n    setAuthorization(null);\n    yield put(authApiResponseSuccess(AuthActionTypes.LOGOUT_USER, {}));\n  } catch (error) {\n    yield put(authApiResponseError(AuthActionTypes.LOGOUT_USER, error));\n  }\n}\n\nfunction* signup(_ref2) {\n  let {\n    payload: {\n      fullname,\n      email,\n      password\n    }\n  } = _ref2;\n\n  try {\n    const response = yield call(signupApi, {\n      fullname,\n      email,\n      password\n    });\n    const user = response.data; // api.setLoggedInUser(user);\n    // setAuthorization(user['token']);\n\n    yield put(authApiResponseSuccess(AuthActionTypes.SIGNUP_USER, user));\n  } catch (error) {\n    yield put(authApiResponseError(AuthActionTypes.SIGNUP_USER, error));\n    api.setLoggedInUser(null);\n    setAuthorization(null);\n  }\n}\n\nfunction* forgotPassword(_ref3) {\n  let {\n    payload: {\n      email\n    }\n  } = _ref3;\n\n  try {\n    const response = yield call(forgotPasswordApi, {\n      email\n    });\n    yield put(authApiResponseSuccess(AuthActionTypes.FORGOT_PASSWORD, response.data));\n  } catch (error) {\n    yield put(authApiResponseError(AuthActionTypes.FORGOT_PASSWORD, error));\n  }\n}\n\nexport function* watchLoginUser() {\n  yield takeEvery(AuthActionTypes.LOGIN_USER, login);\n}\nexport function* watchLogout() {\n  yield takeEvery(AuthActionTypes.LOGOUT_USER, logout);\n}\nexport function* watchSignup() {\n  yield takeEvery(AuthActionTypes.SIGNUP_USER, signup);\n}\nexport function* watchForgotPassword() {\n  yield takeEvery(AuthActionTypes.FORGOT_PASSWORD, forgotPassword);\n}\n\nfunction* authSaga() {\n  yield all([fork(watchLoginUser), fork(watchLogout), fork(watchSignup), fork(watchForgotPassword)]);\n}\n\nexport default authSaga;","map":{"version":3,"sources":["C:/proyecto/practica/src/redux/auth/saga.ts"],"names":["all","fork","put","takeEvery","call","APICore","setAuthorization","login","loginApi","logout","logoutApi","signup","signupApi","forgotPassword","forgotPasswordApi","authApiResponseSuccess","authApiResponseError","AuthActionTypes","api","payload","email","password","type","response","user","data","setLoggedInUser","LOGIN_USER","error","LOGOUT_USER","fullname","SIGNUP_USER","FORGOT_PASSWORD","watchLoginUser","watchLogout","watchSignup","watchForgotPassword","authSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\n// apicore\nimport { APICore, setAuthorization } from '../../helpers/api/apiCore';\n\n// helpers\nimport {\n    login as loginApi,\n    logout as logoutApi,\n    signup as signupApi,\n    forgotPassword as forgotPasswordApi,\n} from '../../helpers/';\n\n// actions\nimport { authApiResponseSuccess, authApiResponseError } from './actions';\n\n// constants\nimport { AuthActionTypes } from './constants';\n\ninterface UserData {\n    payload: {\n        username: string;\n        password: string;\n        fullname: string;\n        email: string;\n    };\n    type: string;\n}\n\nconst api = new APICore();\n\n/**\n * Login the user\n * @param {*} payload - username and password\n */\nfunction* login({ payload: { email, password }, type }: UserData): SagaIterator {\n    try {\n        const response = yield call(loginApi, { email, password });\n        const user = response.data;\n        // NOTE - You can change this according to response format from your api\n        api.setLoggedInUser(user);\n        setAuthorization(user['token']);\n        yield put(authApiResponseSuccess(AuthActionTypes.LOGIN_USER, user));\n    } catch (error: any) {\n        yield put(authApiResponseError(AuthActionTypes.LOGIN_USER, error));\n        api.setLoggedInUser(null);\n        setAuthorization(null);\n    }\n}\n\n/**\n * Logout the user\n */\nfunction* logout(): SagaIterator {\n    try {\n        yield call(logoutApi);\n        api.setLoggedInUser(null);\n        setAuthorization(null);\n        yield put(authApiResponseSuccess(AuthActionTypes.LOGOUT_USER, {}));\n    } catch (error: any) {\n        yield put(authApiResponseError(AuthActionTypes.LOGOUT_USER, error));\n    }\n}\n\nfunction* signup({ payload: { fullname, email, password } }: UserData): SagaIterator {\n    try {\n        const response = yield call(signupApi, { fullname, email, password });\n        const user = response.data;\n        // api.setLoggedInUser(user);\n        // setAuthorization(user['token']);\n        yield put(authApiResponseSuccess(AuthActionTypes.SIGNUP_USER, user));\n    } catch (error: any) {\n        yield put(authApiResponseError(AuthActionTypes.SIGNUP_USER, error));\n        api.setLoggedInUser(null);\n        setAuthorization(null);\n    }\n}\n\nfunction* forgotPassword({ payload: { email } }: UserData): SagaIterator {\n    try {\n        const response = yield call(forgotPasswordApi, { email });\n        yield put(authApiResponseSuccess(AuthActionTypes.FORGOT_PASSWORD, response.data));\n    } catch (error: any) {\n        yield put(authApiResponseError(AuthActionTypes.FORGOT_PASSWORD, error));\n    }\n}\nexport function* watchLoginUser() {\n    yield takeEvery(AuthActionTypes.LOGIN_USER, login);\n}\n\nexport function* watchLogout() {\n    yield takeEvery(AuthActionTypes.LOGOUT_USER, logout);\n}\n\nexport function* watchSignup(): any {\n    yield takeEvery(AuthActionTypes.SIGNUP_USER, signup);\n}\n\nexport function* watchForgotPassword(): any {\n    yield takeEvery(AuthActionTypes.FORGOT_PASSWORD, forgotPassword);\n}\n\nfunction* authSaga() {\n    yield all([fork(watchLoginUser), fork(watchLogout), fork(watchSignup), fork(watchForgotPassword)]);\n}\n\nexport default authSaga;\n"]},"metadata":{},"sourceType":"module"}