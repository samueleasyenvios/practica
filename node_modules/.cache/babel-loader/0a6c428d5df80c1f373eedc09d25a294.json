{"ast":null,"code":"import isEqual from 'fast-deep-equal';\nimport getOptionProperty from './getOptionProperty';\nimport { isFunction, isString } from './nodash';\nimport stripDiacritics from './stripDiacritics';\nimport warn from './warn';\n\nfunction isMatch(input, string, props) {\n  var searchStr = input;\n  var str = string;\n\n  if (!props.caseSensitive) {\n    searchStr = searchStr.toLowerCase();\n    str = str.toLowerCase();\n  }\n\n  if (props.ignoreDiacritics) {\n    searchStr = stripDiacritics(searchStr);\n    str = stripDiacritics(str);\n  }\n\n  return str.indexOf(searchStr) !== -1;\n}\n/**\n * Default algorithm for filtering results.\n */\n\n\nexport default function defaultFilterBy(option, props) {\n  var filterBy = props.filterBy,\n      labelKey = props.labelKey,\n      multiple = props.multiple,\n      selected = props.selected,\n      text = props.text; // Don't show selected options in the menu for the multi-select case.\n\n  if (multiple && selected.some(function (o) {\n    return isEqual(o, option);\n  })) {\n    return false;\n  }\n\n  if (isFunction(labelKey) && isMatch(text, labelKey(option), props)) {\n    return true;\n  }\n\n  var fields = filterBy.slice();\n\n  if (isString(labelKey)) {\n    // Add the `labelKey` field to the list of fields if it isn't already there.\n    if (fields.indexOf(labelKey) === -1) {\n      fields.unshift(labelKey);\n    }\n  }\n\n  if (isString(option)) {\n    warn(fields.length <= 1, 'You cannot filter by properties when `option` is a string.');\n    return isMatch(text, option, props);\n  }\n\n  return fields.some(function (field) {\n    var value = getOptionProperty(option, field);\n\n    if (!isString(value)) {\n      warn(false, 'Fields passed to `filterBy` should have string values. Value will ' + 'be converted to a string; results may be unexpected.');\n      value = String(value);\n    }\n\n    return isMatch(text, value, props);\n  });\n}","map":{"version":3,"sources":["C:/proyecto/practica/node_modules/react-bootstrap-typeahead/es/utils/defaultFilterBy.js"],"names":["isEqual","getOptionProperty","isFunction","isString","stripDiacritics","warn","isMatch","input","string","props","searchStr","str","caseSensitive","toLowerCase","ignoreDiacritics","indexOf","defaultFilterBy","option","filterBy","labelKey","multiple","selected","text","some","o","fields","slice","unshift","length","field","value","String"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,UAArC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgCC,KAAhC,EAAuC;AACrC,MAAIC,SAAS,GAAGH,KAAhB;AACA,MAAII,GAAG,GAAGH,MAAV;;AAEA,MAAI,CAACC,KAAK,CAACG,aAAX,EAA0B;AACxBF,IAAAA,SAAS,GAAGA,SAAS,CAACG,WAAV,EAAZ;AACAF,IAAAA,GAAG,GAAGA,GAAG,CAACE,WAAJ,EAAN;AACD;;AAED,MAAIJ,KAAK,CAACK,gBAAV,EAA4B;AAC1BJ,IAAAA,SAAS,GAAGN,eAAe,CAACM,SAAD,CAA3B;AACAC,IAAAA,GAAG,GAAGP,eAAe,CAACO,GAAD,CAArB;AACD;;AAED,SAAOA,GAAG,CAACI,OAAJ,CAAYL,SAAZ,MAA2B,CAAC,CAAnC;AACD;AACD;AACA;AACA;;;AAGA,eAAe,SAASM,eAAT,CAAyBC,MAAzB,EAAiCR,KAAjC,EAAwC;AACrD,MAAIS,QAAQ,GAAGT,KAAK,CAACS,QAArB;AAAA,MACIC,QAAQ,GAAGV,KAAK,CAACU,QADrB;AAAA,MAEIC,QAAQ,GAAGX,KAAK,CAACW,QAFrB;AAAA,MAGIC,QAAQ,GAAGZ,KAAK,CAACY,QAHrB;AAAA,MAIIC,IAAI,GAAGb,KAAK,CAACa,IAJjB,CADqD,CAK9B;;AAEvB,MAAIF,QAAQ,IAAIC,QAAQ,CAACE,IAAT,CAAc,UAAUC,CAAV,EAAa;AACzC,WAAOxB,OAAO,CAACwB,CAAD,EAAIP,MAAJ,CAAd;AACD,GAFe,CAAhB,EAEI;AACF,WAAO,KAAP;AACD;;AAED,MAAIf,UAAU,CAACiB,QAAD,CAAV,IAAwBb,OAAO,CAACgB,IAAD,EAAOH,QAAQ,CAACF,MAAD,CAAf,EAAyBR,KAAzB,CAAnC,EAAoE;AAClE,WAAO,IAAP;AACD;;AAED,MAAIgB,MAAM,GAAGP,QAAQ,CAACQ,KAAT,EAAb;;AAEA,MAAIvB,QAAQ,CAACgB,QAAD,CAAZ,EAAwB;AACtB;AACA,QAAIM,MAAM,CAACV,OAAP,CAAeI,QAAf,MAA6B,CAAC,CAAlC,EAAqC;AACnCM,MAAAA,MAAM,CAACE,OAAP,CAAeR,QAAf;AACD;AACF;;AAED,MAAIhB,QAAQ,CAACc,MAAD,CAAZ,EAAsB;AACpBZ,IAAAA,IAAI,CAACoB,MAAM,CAACG,MAAP,IAAiB,CAAlB,EAAqB,4DAArB,CAAJ;AACA,WAAOtB,OAAO,CAACgB,IAAD,EAAOL,MAAP,EAAeR,KAAf,CAAd;AACD;;AAED,SAAOgB,MAAM,CAACF,IAAP,CAAY,UAAUM,KAAV,EAAiB;AAClC,QAAIC,KAAK,GAAG7B,iBAAiB,CAACgB,MAAD,EAASY,KAAT,CAA7B;;AAEA,QAAI,CAAC1B,QAAQ,CAAC2B,KAAD,CAAb,EAAsB;AACpBzB,MAAAA,IAAI,CAAC,KAAD,EAAQ,uEAAuE,sDAA/E,CAAJ;AACAyB,MAAAA,KAAK,GAAGC,MAAM,CAACD,KAAD,CAAd;AACD;;AAED,WAAOxB,OAAO,CAACgB,IAAD,EAAOQ,KAAP,EAAcrB,KAAd,CAAd;AACD,GATM,CAAP;AAUD","sourcesContent":["import isEqual from 'fast-deep-equal';\nimport getOptionProperty from './getOptionProperty';\nimport { isFunction, isString } from './nodash';\nimport stripDiacritics from './stripDiacritics';\nimport warn from './warn';\n\nfunction isMatch(input, string, props) {\n  var searchStr = input;\n  var str = string;\n\n  if (!props.caseSensitive) {\n    searchStr = searchStr.toLowerCase();\n    str = str.toLowerCase();\n  }\n\n  if (props.ignoreDiacritics) {\n    searchStr = stripDiacritics(searchStr);\n    str = stripDiacritics(str);\n  }\n\n  return str.indexOf(searchStr) !== -1;\n}\n/**\n * Default algorithm for filtering results.\n */\n\n\nexport default function defaultFilterBy(option, props) {\n  var filterBy = props.filterBy,\n      labelKey = props.labelKey,\n      multiple = props.multiple,\n      selected = props.selected,\n      text = props.text; // Don't show selected options in the menu for the multi-select case.\n\n  if (multiple && selected.some(function (o) {\n    return isEqual(o, option);\n  })) {\n    return false;\n  }\n\n  if (isFunction(labelKey) && isMatch(text, labelKey(option), props)) {\n    return true;\n  }\n\n  var fields = filterBy.slice();\n\n  if (isString(labelKey)) {\n    // Add the `labelKey` field to the list of fields if it isn't already there.\n    if (fields.indexOf(labelKey) === -1) {\n      fields.unshift(labelKey);\n    }\n  }\n\n  if (isString(option)) {\n    warn(fields.length <= 1, 'You cannot filter by properties when `option` is a string.');\n    return isMatch(text, option, props);\n  }\n\n  return fields.some(function (field) {\n    var value = getOptionProperty(option, field);\n\n    if (!isString(value)) {\n      warn(false, 'Fields passed to `filterBy` should have string values. Value will ' + 'be converted to a string; results may be unexpected.');\n      value = String(value);\n    }\n\n    return isMatch(text, value, props);\n  });\n}"]},"metadata":{},"sourceType":"module"}