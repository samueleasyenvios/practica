{"ast":null,"code":"import getOptionLabel from './getOptionLabel';\n\nfunction addCustomOption(results, props) {\n  var allowNew = props.allowNew,\n      labelKey = props.labelKey,\n      text = props.text;\n\n  if (!allowNew || !text.trim()) {\n    return false;\n  } // If the consumer has provided a callback, use that to determine whether or\n  // not to add the custom option.\n\n\n  if (typeof allowNew === 'function') {\n    return allowNew(results, props);\n  } // By default, don't add the custom option if there is an exact text match\n  // with an existing option.\n\n\n  return !results.some(function (o) {\n    return getOptionLabel(o, labelKey) === text;\n  });\n}\n\nexport default addCustomOption;","map":{"version":3,"sources":["C:/proyecto/practica/node_modules/react-bootstrap-typeahead/es/utils/addCustomOption.js"],"names":["getOptionLabel","addCustomOption","results","props","allowNew","labelKey","text","trim","some","o"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;;AAEA,SAASC,eAAT,CAAyBC,OAAzB,EAAkCC,KAAlC,EAAyC;AACvC,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIC,QAAQ,GAAGF,KAAK,CAACE,QADrB;AAAA,MAEIC,IAAI,GAAGH,KAAK,CAACG,IAFjB;;AAIA,MAAI,CAACF,QAAD,IAAa,CAACE,IAAI,CAACC,IAAL,EAAlB,EAA+B;AAC7B,WAAO,KAAP;AACD,GAPsC,CAOrC;AACF;;;AAGA,MAAI,OAAOH,QAAP,KAAoB,UAAxB,EAAoC;AAClC,WAAOA,QAAQ,CAACF,OAAD,EAAUC,KAAV,CAAf;AACD,GAbsC,CAarC;AACF;;;AAGA,SAAO,CAACD,OAAO,CAACM,IAAR,CAAa,UAAUC,CAAV,EAAa;AAChC,WAAOT,cAAc,CAACS,CAAD,EAAIJ,QAAJ,CAAd,KAAgCC,IAAvC;AACD,GAFO,CAAR;AAGD;;AAED,eAAeL,eAAf","sourcesContent":["import getOptionLabel from './getOptionLabel';\n\nfunction addCustomOption(results, props) {\n  var allowNew = props.allowNew,\n      labelKey = props.labelKey,\n      text = props.text;\n\n  if (!allowNew || !text.trim()) {\n    return false;\n  } // If the consumer has provided a callback, use that to determine whether or\n  // not to add the custom option.\n\n\n  if (typeof allowNew === 'function') {\n    return allowNew(results, props);\n  } // By default, don't add the custom option if there is an exact text match\n  // with an existing option.\n\n\n  return !results.some(function (o) {\n    return getOptionLabel(o, labelKey) === text;\n  });\n}\n\nexport default addCustomOption;"]},"metadata":{},"sourceType":"module"}