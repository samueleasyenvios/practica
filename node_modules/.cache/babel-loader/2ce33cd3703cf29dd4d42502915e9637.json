{"ast":null,"code":"// apicore\nimport { APICore } from '../../helpers/api/apiCore'; // constants\n\nimport { AuthActionTypes } from './constants';\nconst api = new APICore();\nconst INIT_STATE = {\n  user: api.getLoggedInUser(),\n  loading: false\n};\n\nconst Auth = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INIT_STATE;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case AuthActionTypes.API_RESPONSE_SUCCESS:\n      switch (action.payload.actionType) {\n        case AuthActionTypes.LOGIN_USER:\n          {\n            return { ...state,\n              user: action.payload.data,\n              userLoggedIn: true,\n              loading: false\n            };\n          }\n\n        case AuthActionTypes.SIGNUP_USER:\n          {\n            return { ...state,\n              loading: false,\n              userSignUp: true\n            };\n          }\n\n        case AuthActionTypes.LOGOUT_USER:\n          {\n            return { ...state,\n              user: null,\n              loading: false,\n              userLogout: true\n            };\n          }\n\n        case AuthActionTypes.FORGOT_PASSWORD:\n          {\n            return { ...state,\n              resetPasswordSuccess: action.payload.data,\n              loading: false,\n              passwordReset: true\n            };\n          }\n\n        default:\n          return { ...state\n          };\n      }\n\n    case AuthActionTypes.API_RESPONSE_ERROR:\n      switch (action.payload.actionType) {\n        case AuthActionTypes.LOGIN_USER:\n          {\n            return { ...state,\n              error: action.payload.error,\n              userLoggedIn: false,\n              loading: false\n            };\n          }\n\n        case AuthActionTypes.SIGNUP_USER:\n          {\n            return { ...state,\n              registerError: action.payload.error,\n              userSignUp: false,\n              loading: false\n            };\n          }\n\n        case AuthActionTypes.FORGOT_PASSWORD:\n          {\n            return { ...state,\n              error: action.payload.error,\n              loading: false,\n              passwordReset: false\n            };\n          }\n\n        default:\n          return { ...state\n          };\n      }\n\n    case AuthActionTypes.LOGIN_USER:\n      return { ...state,\n        loading: true,\n        userLoggedIn: false\n      };\n\n    case AuthActionTypes.LOGOUT_USER:\n      return { ...state,\n        loading: true,\n        userLogout: false\n      };\n\n    case AuthActionTypes.RESET:\n      return { ...state,\n        loading: false,\n        error: false,\n        userSignUp: false,\n        userLoggedIn: false,\n        passwordReset: false,\n        passwordChange: false,\n        resetPasswordSuccess: null\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\n_c = Auth;\nexport default Auth;\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"sources":["C:/proyecto/practica/src/redux/auth/reducers.ts"],"names":["APICore","AuthActionTypes","api","INIT_STATE","user","getLoggedInUser","loading","Auth","state","action","type","API_RESPONSE_SUCCESS","payload","actionType","LOGIN_USER","data","userLoggedIn","SIGNUP_USER","userSignUp","LOGOUT_USER","userLogout","FORGOT_PASSWORD","resetPasswordSuccess","passwordReset","API_RESPONSE_ERROR","error","registerError","RESET","passwordChange"],"mappings":"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","sourcesContent":["// apicore\nimport { APICore } from '../../helpers/api/apiCore';\n\n// constants\nimport { AuthActionTypes } from './constants';\n\nconst api = new APICore();\n\nconst INIT_STATE = {\n    user: api.getLoggedInUser(),\n    loading: false,\n};\n\ninterface UserData {\n    id: number;\n    email: string;\n    username: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    role: string;\n    token: string;\n}\n\ninterface AuthActionType {\n    type:\n        | AuthActionTypes.API_RESPONSE_SUCCESS\n        | AuthActionTypes.API_RESPONSE_ERROR\n        | AuthActionTypes.LOGIN_USER\n        | AuthActionTypes.LOGOUT_USER\n        | AuthActionTypes.RESET;\n    payload: {\n        actionType?: string;\n        data?: UserData | {};\n        error?: string;\n    };\n}\n\ninterface State {\n    user?: UserData | {};\n    loading?: boolean;\n    value?: boolean;\n}\n\nconst Auth = (state: State = INIT_STATE, action: AuthActionType): any => {\n    switch (action.type) {\n        case AuthActionTypes.API_RESPONSE_SUCCESS:\n            switch (action.payload.actionType) {\n                case AuthActionTypes.LOGIN_USER: {\n                    return {\n                        ...state,\n                        user: action.payload.data,\n                        userLoggedIn: true,\n                        loading: false,\n                    };\n                }\n                case AuthActionTypes.SIGNUP_USER: {\n                    return {\n                        ...state,\n                        loading: false,\n                        userSignUp: true,\n                    };\n                }\n                case AuthActionTypes.LOGOUT_USER: {\n                    return {\n                        ...state,\n                        user: null,\n                        loading: false,\n                        userLogout: true,\n                    };\n                }\n                case AuthActionTypes.FORGOT_PASSWORD: {\n                    return {\n                        ...state,\n                        resetPasswordSuccess: action.payload.data,\n                        loading: false,\n                        passwordReset: true,\n                    };\n                }\n                default:\n                    return { ...state };\n            }\n\n        case AuthActionTypes.API_RESPONSE_ERROR:\n            switch (action.payload.actionType) {\n                case AuthActionTypes.LOGIN_USER: {\n                    return {\n                        ...state,\n                        error: action.payload.error,\n                        userLoggedIn: false,\n                        loading: false,\n                    };\n                }\n                case AuthActionTypes.SIGNUP_USER: {\n                    return {\n                        ...state,\n                        registerError: action.payload.error,\n                        userSignUp: false,\n                        loading: false,\n                    };\n                }\n                case AuthActionTypes.FORGOT_PASSWORD: {\n                    return {\n                        ...state,\n                        error: action.payload.error,\n                        loading: false,\n                        passwordReset: false,\n                    };\n                }\n                default:\n                    return { ...state };\n            }\n\n        case AuthActionTypes.LOGIN_USER:\n            return { ...state, loading: true, userLoggedIn: false };\n        case AuthActionTypes.LOGOUT_USER:\n            return { ...state, loading: true, userLogout: false };\n        case AuthActionTypes.RESET:\n            return {\n                ...state,\n                loading: false,\n                error: false,\n                userSignUp: false,\n                userLoggedIn: false,\n                passwordReset: false,\n                passwordChange: false,\n                resetPasswordSuccess: null,\n            };\n        default:\n            return { ...state };\n    }\n};\n\nexport default Auth;\n"]},"metadata":{},"sourceType":"module"}