{"ast":null,"code":"import invariant from 'invariant';\nimport getStringLabelKey from './getStringLabelKey';\nimport { isFunction, isString } from './nodash';\n/**\n * Retrieves the display string from an option. Options can be the string\n * themselves, or an object with a defined display string. Anything else throws\n * an error.\n */\n\nfunction getOptionLabel(option, labelKey) {\n  // Handle internally created options first.\n  if (!isString(option) && (option.paginationOption || option.customOption)) {\n    return option[getStringLabelKey(labelKey)];\n  }\n\n  var optionLabel;\n\n  if (isFunction(labelKey)) {\n    optionLabel = labelKey(option);\n  } else if (isString(option)) {\n    optionLabel = option;\n  } else {\n    // `option` is an object and `labelKey` is a string.\n    optionLabel = option[labelKey];\n  }\n\n  !isString(optionLabel) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'One or more options does not have a valid label string. Check the ' + '`labelKey` prop to ensure that it matches the correct option key and ' + 'provides a string for filtering and display.') : invariant(false) : void 0;\n  return optionLabel;\n}\n\nexport default getOptionLabel;","map":{"version":3,"sources":["C:/proyecto/practica/node_modules/react-bootstrap-typeahead/es/utils/getOptionLabel.js"],"names":["invariant","getStringLabelKey","isFunction","isString","getOptionLabel","option","labelKey","paginationOption","customOption","optionLabel","process","env","NODE_ENV"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,UAArC;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,MAAxB,EAAgCC,QAAhC,EAA0C;AACxC;AACA,MAAI,CAACH,QAAQ,CAACE,MAAD,CAAT,KAAsBA,MAAM,CAACE,gBAAP,IAA2BF,MAAM,CAACG,YAAxD,CAAJ,EAA2E;AACzE,WAAOH,MAAM,CAACJ,iBAAiB,CAACK,QAAD,CAAlB,CAAb;AACD;;AAED,MAAIG,WAAJ;;AAEA,MAAIP,UAAU,CAACI,QAAD,CAAd,EAA0B;AACxBG,IAAAA,WAAW,GAAGH,QAAQ,CAACD,MAAD,CAAtB;AACD,GAFD,MAEO,IAAIF,QAAQ,CAACE,MAAD,CAAZ,EAAsB;AAC3BI,IAAAA,WAAW,GAAGJ,MAAd;AACD,GAFM,MAEA;AACL;AACAI,IAAAA,WAAW,GAAGJ,MAAM,CAACC,QAAD,CAApB;AACD;;AAED,GAACH,QAAQ,CAACM,WAAD,CAAT,GAAyBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCZ,SAAS,CAAC,KAAD,EAAQ,uEAAuE,uEAAvE,GAAiJ,8CAAzJ,CAAjD,GAA4PA,SAAS,CAAC,KAAD,CAA9R,GAAwS,KAAK,CAA7S;AACA,SAAOS,WAAP;AACD;;AAED,eAAeL,cAAf","sourcesContent":["import invariant from 'invariant';\nimport getStringLabelKey from './getStringLabelKey';\nimport { isFunction, isString } from './nodash';\n\n/**\n * Retrieves the display string from an option. Options can be the string\n * themselves, or an object with a defined display string. Anything else throws\n * an error.\n */\nfunction getOptionLabel(option, labelKey) {\n  // Handle internally created options first.\n  if (!isString(option) && (option.paginationOption || option.customOption)) {\n    return option[getStringLabelKey(labelKey)];\n  }\n\n  var optionLabel;\n\n  if (isFunction(labelKey)) {\n    optionLabel = labelKey(option);\n  } else if (isString(option)) {\n    optionLabel = option;\n  } else {\n    // `option` is an object and `labelKey` is a string.\n    optionLabel = option[labelKey];\n  }\n\n  !isString(optionLabel) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'One or more options does not have a valid label string. Check the ' + '`labelKey` prop to ensure that it matches the correct option key and ' + 'provides a string for filtering and display.') : invariant(false) : void 0;\n  return optionLabel;\n}\n\nexport default getOptionLabel;"]},"metadata":{},"sourceType":"module"}