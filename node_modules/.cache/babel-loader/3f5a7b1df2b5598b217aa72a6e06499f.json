{"ast":null,"code":"var _jsxFileName = \"C:\\\\proyecto\\\\practica\\\\src\\\\routes\\\\PrivateRoute.tsx\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { APICore } from '../helpers/api/apiCore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * Private Route forces the authorization before the route can be accessed\n * @param {*} param0\n * @returns\n */\nconst PrivateRoute = _ref => {\n  let {\n    component: Component,\n    roles,\n    ...rest\n  } = _ref;\n  const api = new APICore();\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => {\n      if (api.isUserAuthenticated() === false) {\n        // not logged in so redirect to login page with the return url\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: {\n            pathname: '/auth/login',\n            state: {\n              from: props['location']\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 25\n        }, this);\n      }\n\n      const loggedInUser = api.getLoggedInUser(); // check if route is restricted by role\n\n      if (roles && roles.indexOf(loggedInUser.role) === -1) {\n        // role not authorised so redirect to home page\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: {\n            pathname: '/'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 28\n        }, this);\n      } // authorised so return component\n\n\n      return /*#__PURE__*/_jsxDEV(Component, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 24\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["C:/proyecto/practica/src/routes/PrivateRoute.tsx"],"names":["React","Route","Redirect","APICore","PrivateRoute","component","Component","roles","rest","api","props","isUserAuthenticated","pathname","state","from","loggedInUser","getLoggedInUser","indexOf","role"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAiE,kBAAjE;AAEA,SAASC,OAAT,QAAwB,wBAAxB;;;AAOA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,QAAiE;AAAA,MAAhE;AAAEC,IAAAA,SAAS,EAAEC,SAAb;AAAwBC,IAAAA,KAAxB;AAA+B,OAAGC;AAAlC,GAAgE;AAClF,QAAMC,GAAG,GAAG,IAAIN,OAAJ,EAAZ;AAEA,sBACI,QAAC,KAAD,OACQK,IADR;AAEI,IAAA,MAAM,EAAGE,KAAD,IAAgC;AACpC,UAAID,GAAG,CAACE,mBAAJ,OAA8B,KAAlC,EAAyC;AACrC;AACA,4BACI,QAAC,QAAD;AACI,UAAA,EAAE,EAAE;AACAC,YAAAA,QAAQ,EAAE,aADV;AAEAC,YAAAA,KAAK,EAAE;AAAEC,cAAAA,IAAI,EAAEJ,KAAK,CAAC,UAAD;AAAb;AAFP;AADR;AAAA;AAAA;AAAA;AAAA,gBADJ;AAQH;;AAED,YAAMK,YAAY,GAAGN,GAAG,CAACO,eAAJ,EAArB,CAboC,CAepC;;AACA,UAAIT,KAAK,IAAIA,KAAK,CAACU,OAAN,CAAcF,YAAY,CAACG,IAA3B,MAAqC,CAAC,CAAnD,EAAsD;AAClD;AACA,4BAAO,QAAC,QAAD;AAAU,UAAA,EAAE,EAAE;AAAEN,YAAAA,QAAQ,EAAE;AAAZ;AAAd;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAnBmC,CAoBpC;;;AACA,0BAAO,QAAC,SAAD,OAAeF;AAAf;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;AAxBL;AAAA;AAAA;AAAA;AAAA,UADJ;AA4BH,CA/BD;;KAAMN,Y;AAiCN,eAAeA,YAAf","sourcesContent":["import React from 'react';\nimport { Route, Redirect, RouteProps, RouteComponentProps } from 'react-router-dom';\n\nimport { APICore } from '../helpers/api/apiCore';\n\ninterface PrivateRouteProps {\n    component: React.FunctionComponent<RouteProps>;\n    roles?: string;\n}\n\n/**\n * Private Route forces the authorization before the route can be accessed\n * @param {*} param0\n * @returns\n */\nconst PrivateRoute = ({ component: Component, roles, ...rest }: PrivateRouteProps) => {\n    const api = new APICore();\n\n    return (\n        <Route\n            {...rest}\n            render={(props: RouteComponentProps) => {\n                if (api.isUserAuthenticated() === false) {\n                    // not logged in so redirect to login page with the return url\n                    return (\n                        <Redirect\n                            to={{\n                                pathname: '/auth/login',\n                                state: { from: props['location'] },\n                            }}\n                        />\n                    );\n                }\n\n                const loggedInUser = api.getLoggedInUser();\n\n                // check if route is restricted by role\n                if (roles && roles.indexOf(loggedInUser.role) === -1) {\n                    // role not authorised so redirect to home page\n                    return <Redirect to={{ pathname: '/' }} />;\n                }\n                // authorised so return component\n                return <Component {...props} />;\n            }}\n        />\n    );\n};\n\nexport default PrivateRoute;\n"]},"metadata":{},"sourceType":"module"}