{"ast":null,"code":"import * as equal from 'fast-deep-equal';\nimport is from 'is-lite';\nimport { compareNumbers, compareValues, getIterables, includesOrEqualsTo, nested } from './helpers';\nexport default function treeChanges(previousData, data) {\n  if ([previousData, data].some(is.nullOrUndefined)) {\n    throw new Error('Missing required parameters');\n  }\n\n  if (![previousData, data].every(function (d) {\n    return is.plainObject(d) || is.array(d);\n  })) {\n    throw new Error('Expected plain objects or array');\n  }\n\n  var added = function (key, value) {\n    try {\n      return compareValues(previousData, data, {\n        key: key,\n        type: 'added',\n        value: value\n      });\n    } catch (_a) {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n\n  var changed = function (key, actual, previous) {\n    try {\n      var left = nested(previousData, key);\n      var right = nested(data, key);\n      var hasActual = is.defined(actual);\n      var hasPrevious = is.defined(previous);\n\n      if (hasActual || hasPrevious) {\n        var leftComparator = hasPrevious ? includesOrEqualsTo(previous, left) : !includesOrEqualsTo(actual, left);\n        var rightComparator = includesOrEqualsTo(actual, right);\n        return leftComparator && rightComparator;\n      }\n\n      if ([left, right].every(is.array) || [left, right].every(is.plainObject)) {\n        return !equal(left, right);\n      }\n\n      return left !== right;\n    } catch (_a) {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n\n  var changedFrom = function (key, previous, actual) {\n    if (!is.defined(key)) {\n      return false;\n    }\n\n    try {\n      var left = nested(previousData, key);\n      var right = nested(data, key);\n      var hasActual = is.defined(actual);\n      return includesOrEqualsTo(previous, left) && (hasActual ? includesOrEqualsTo(actual, right) : !hasActual);\n    } catch (_a) {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n  /**\n   * @deprecated\n   * Use \"changed\" instead\n   */\n\n\n  var changedTo = function (key, actual) {\n    if (!is.defined(key)) {\n      return false;\n    }\n    /* istanbul ignore next */\n\n\n    if (process.env.NODE_ENV === 'development') {\n      // eslint-disable-next-line no-console\n      console.warn('`changedTo` is deprecated! Replace it with `change`');\n    }\n\n    return changed(key, actual);\n  };\n\n  var decreased = function (key, actual, previous) {\n    if (!is.defined(key)) {\n      return false;\n    }\n\n    try {\n      return compareNumbers(previousData, data, {\n        key: key,\n        actual: actual,\n        previous: previous,\n        type: 'decreased'\n      });\n    } catch (_a) {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n\n  var emptied = function (key) {\n    try {\n      var _a = getIterables(previousData, data, {\n        key: key\n      }),\n          left = _a[0],\n          right = _a[1];\n\n      return !!left.length && !right.length;\n    } catch (_b) {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n\n  var filled = function (key) {\n    try {\n      var _a = getIterables(previousData, data, {\n        key: key\n      }),\n          left = _a[0],\n          right = _a[1];\n\n      return !left.length && !!right.length;\n    } catch (_b) {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n\n  var increased = function (key, actual, previous) {\n    if (!is.defined(key)) {\n      return false;\n    }\n\n    try {\n      return compareNumbers(previousData, data, {\n        key: key,\n        actual: actual,\n        previous: previous,\n        type: 'increased'\n      });\n    } catch (_a) {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n\n  var removed = function (key, value) {\n    try {\n      return compareValues(previousData, data, {\n        key: key,\n        type: 'removed',\n        value: value\n      });\n    } catch (_a) {\n      /* istanbul ignore next */\n      return false;\n    }\n  };\n\n  return {\n    added: added,\n    changed: changed,\n    changedFrom: changedFrom,\n    changedTo: changedTo,\n    decreased: decreased,\n    emptied: emptied,\n    filled: filled,\n    increased: increased,\n    removed: removed\n  };\n}\nexport * from './types';","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as equal from 'fast-deep-equal';\nimport is from 'is-lite';\nimport { compareNumbers, compareValues, getIterables, includesOrEqualsTo, nested } from './helpers';\nexport default function treeChanges(previousData, data) {\n    if ([previousData, data].some(is.nullOrUndefined)) {\n        throw new Error('Missing required parameters');\n    }\n    if (![previousData, data].every(function (d) { return is.plainObject(d) || is.array(d); })) {\n        throw new Error('Expected plain objects or array');\n    }\n    var added = function (key, value) {\n        try {\n            return compareValues(previousData, data, { key: key, type: 'added', value: value });\n        }\n        catch (_a) {\n            /* istanbul ignore next */\n            return false;\n        }\n    };\n    var changed = function (key, actual, previous) {\n        try {\n            var left = nested(previousData, key);\n            var right = nested(data, key);\n            var hasActual = is.defined(actual);\n            var hasPrevious = is.defined(previous);\n            if (hasActual || hasPrevious) {\n                var leftComparator = hasPrevious\n                    ? includesOrEqualsTo(previous, left)\n                    : !includesOrEqualsTo(actual, left);\n                var rightComparator = includesOrEqualsTo(actual, right);\n                return leftComparator && rightComparator;\n            }\n            if ([left, right].every(is.array) || [left, right].every(is.plainObject)) {\n                return !equal(left, right);\n            }\n            return left !== right;\n        }\n        catch (_a) {\n            /* istanbul ignore next */\n            return false;\n        }\n    };\n    var changedFrom = function (key, previous, actual) {\n        if (!is.defined(key)) {\n            return false;\n        }\n        try {\n            var left = nested(previousData, key);\n            var right = nested(data, key);\n            var hasActual = is.defined(actual);\n            return (includesOrEqualsTo(previous, left) &&\n                (hasActual ? includesOrEqualsTo(actual, right) : !hasActual));\n        }\n        catch (_a) {\n            /* istanbul ignore next */\n            return false;\n        }\n    };\n    /**\n     * @deprecated\n     * Use \"changed\" instead\n     */\n    var changedTo = function (key, actual) {\n        if (!is.defined(key)) {\n            return false;\n        }\n        /* istanbul ignore next */\n        if (process.env.NODE_ENV === 'development') {\n            // eslint-disable-next-line no-console\n            console.warn('`changedTo` is deprecated! Replace it with `change`');\n        }\n        return changed(key, actual);\n    };\n    var decreased = function (key, actual, previous) {\n        if (!is.defined(key)) {\n            return false;\n        }\n        try {\n            return compareNumbers(previousData, data, { key: key, actual: actual, previous: previous, type: 'decreased' });\n        }\n        catch (_a) {\n            /* istanbul ignore next */\n            return false;\n        }\n    };\n    var emptied = function (key) {\n        try {\n            var _a = getIterables(previousData, data, { key: key }), left = _a[0], right = _a[1];\n            return !!left.length && !right.length;\n        }\n        catch (_b) {\n            /* istanbul ignore next */\n            return false;\n        }\n    };\n    var filled = function (key) {\n        try {\n            var _a = getIterables(previousData, data, { key: key }), left = _a[0], right = _a[1];\n            return !left.length && !!right.length;\n        }\n        catch (_b) {\n            /* istanbul ignore next */\n            return false;\n        }\n    };\n    var increased = function (key, actual, previous) {\n        if (!is.defined(key)) {\n            return false;\n        }\n        try {\n            return compareNumbers(previousData, data, { key: key, actual: actual, previous: previous, type: 'increased' });\n        }\n        catch (_a) {\n            /* istanbul ignore next */\n            return false;\n        }\n    };\n    var removed = function (key, value) {\n        try {\n            return compareValues(previousData, data, { key: key, type: 'removed', value: value });\n        }\n        catch (_a) {\n            /* istanbul ignore next */\n            return false;\n        }\n    };\n    return { added: added, changed: changed, changedFrom: changedFrom, changedTo: changedTo, decreased: decreased, emptied: emptied, filled: filled, increased: increased, removed: removed };\n}\nexport * from './types';\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}