{"version":3,"file":"index.umd.js","sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getControllerValue.ts","../src/logic/isNameInFieldArray.ts","../src/logic/getNodeParentName.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/logic/shouldSubscribeByName.ts","../src/useSubscribe.ts","../src/useFormState.ts","../src/utils/isString.ts","../src/logic/generateWatchOutput.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/useWatch.ts","../src/useController.ts","../src/logic/appendErrors.ts","../src/logic/focusFieldBy.ts","../src/logic/getFocusFieldName.ts","../src/logic/mapCurrentIds.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/utils/isFunction.ts","../src/utils/cloneObject.ts","../src/utils/createSubject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isBoolean.ts","../src/utils/isFileInput.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/unset.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/schemaErrorLookup.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/deepMerge.ts","../src/logic/unsetEmptyArray.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/logic/getResolverOptions.ts","../src/logic/hasValidation.ts","../src/logic/skipValidation.ts","../src/utils/isRadioOrCheckbox.ts","../src/controller.tsx","../src/useFieldArray.ts","../src/utils/omitKeys.ts","../src/useForm.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n) =>\n  !name ||\n  !signalName ||\n  name === signalName ||\n  convertToArrayPayload(name).some(\n    (currentName) =>\n      currentName &&\n      (currentName.startsWith(signalName) ||\n        signalName.startsWith(currentName)),\n  );\n","import * as React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\ntype Payload<T> = {\n  _subscription: React.MutableRefObject<Subscription | undefined>;\n  props: Props<T>;\n};\n\nconst tearDown = (\n  _subscription: React.MutableRefObject<Subscription | undefined>,\n) => {\n  if (_subscription.current) {\n    _subscription.current.unsubscribe();\n    _subscription.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps = <T>({ _subscription, props }: Payload<T>) => {\n  if (props.disabled) {\n    tearDown(_subscription);\n  } else if (!_subscription.current) {\n    _subscription.current = props.subject.subscribe({\n      next: props.callback,\n    });\n  }\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _subscription = React.useRef<Subscription>();\n\n  updateSubscriptionProps({\n    _subscription,\n    props,\n  });\n\n  React.useEffect(() => {\n    return () => tearDown(_subscription);\n  }, []);\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport {\n  FieldValues,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (formState) =>\n      shouldSubscribeByName(\n        _name.current as InternalFieldName,\n        formState.name,\n      ) &&\n      shouldRenderFormState(formState, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...formState,\n      }),\n    subject: control._subjects.state,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport function generateWatchOutput(\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n}\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import * as React from 'react';\n\nimport { generateWatchOutput } from './logic/generateWatchOutput';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isObject from './utils/isObject';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\nimport { get } from './utils';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: (formState) => {\n      if (\n        shouldSubscribeByName(\n          _name.current as InternalFieldName,\n          formState.name,\n        )\n      ) {\n        const fieldValues = generateWatchOutput(\n          _name.current as InternalFieldName | InternalFieldName[],\n          control._names,\n          control._formValues,\n        );\n\n        updateValue(\n          isObject(fieldValues) &&\n            !(\n              isString(_name.current) &&\n              get(control._fields, _name.current as InternalFieldName, {})._f\n            )\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : fieldValues,\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useWatch } from './useWatch';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  });\n  const formState = useFormState({\n    control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  React.useEffect(() => {\n    const updateMounted = (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister]);\n\n  return {\n    field: {\n      onChange: (event) => {\n        registerProps.onChange({\n          target: {\n            value: getControllerValue(event),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import * as React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport { generateWatchOutput } from './generateWatchOutput';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (\n    name: FieldPath<TFieldValues>,\n    isBlurEvent?: boolean,\n  ) =>\n    !isBlurEvent &&\n    (_names.watchAll ||\n      _names.watch.has(name) ||\n      _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue: SetFieldValue<TFieldValues> = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) &&\n      !options.disabled &&\n      set(_formValues, name, get(_formValues, name, options.value));\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue\n        ? _getDirty(name, get(_defaultValues, name))\n        : _getDirty();\n    }\n\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n\n    _subjects.state.next({ ..._formState });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values = !isEmptyObject(formValues)\n      ? cloneUpdatedValues\n      : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.watch.next({\n        values,\n      });\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: ({ values, name: fieldArrayName }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      _actioned.current = true;\n      set(control._formValues, name, updatedFieldArrayValues);\n      setFields(updatedFieldArrayValuesWithKey);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    control._updateFieldArray(\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValuesWithKey.length - appendValue.length,\n      options,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n    );\n    control._updateFieldArray(\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    control._updateFieldArray(\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      updateValues(_fieldIds.current),\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = mapIds(convertToArrayPayload(value), keyName);\n    control._updateFieldArray(\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      updateValues(updatedFieldArrayValuesWithKey),\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n          break;\n        }\n      }\n    }\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then((result) => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors as FieldErrors<TFieldValues>,\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  React.useEffect(\n    () => () =>\n      Object.values(control._subjects).forEach((subject) =>\n        subject.unsubscribe(),\n      ),\n    [control],\n  );\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"names":["element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","HookFormContext","React","createContext","useFormContext","useContext","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","omit","isEmptyObject","find","signalName","convertToArrayPayload","currentName","startsWith","tearDown","_subscription","unsubscribe","useSubscribe","props","useRef","disabled","subject","subscribe","next","callback","updateSubscriptionProps","useEffect","useFormState","methods","control","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","shouldSubscribeByName","shouldRenderFormState","_subjects","state","getProxyFormState","generateWatchOutput","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","useWatch","fieldValues","_formValues","updateValue","_fields","_f","_getWatch","_removeUnmounted","useController","shouldUnregister","_defaultValues","registerProps","register","rules","updateMounted","field","mount","_shouldUnregisterField","_options","isNameInFieldArray","array","_stateFlags","action","unregister","onChange","getControllerValue","onBlur","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","validateAllFieldCriteria","types","[object Object]","focusFieldBy","fields","fieldsNames","refs","options","shouldFocus","focusName","focusIndex","values","_fieldIds","keyName","output","d","performance","now","c","r","Math","random","toString","generateId","append","insert","slice","from","to","splice","prepend","indexes","i","temp","removeAtIndexes","sort","a","b","indexA","indexB","cloneObject","Set","isFunction","createSubject","_observers","observers","observer","push","o","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","window","document","isHTMLElement","contains","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","schemaErrorLookup","join","foundError","pop","setDirtyFields","defaultValues","parentNode","parentName","deepMerge","targetValue","sourceValue","isValidElement","RegExp","getValidateError","isMessage","validationData","isRegex","async","inputValue","shouldUseNativeValidation","required","maxLength","minLength","min","max","pattern","validate","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","reValidateMode","shouldFocusError","isWindowUndefined","createFormControl","delayErrorCallback","isSubmitted","submitCount","isSubmitting","isSubmitSuccessful","unMount","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","criteriaMode","isFieldWatched","isBlurEvent","has","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuildInValidation","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","isPreviousFieldTouched","isPreviousFormDirty","_getDirty","isPreviousFieldDirty","updateFieldArrayDirty","setFieldArrayDirtyFields","unsetEmptyArray","shouldRenderByError","previousFieldError","shouldUpdateValid","wait","delayError","args","clearTimeout","setTimeout","updatedFormState","context","getResolverOptions","shouldOnlyCheckValid","valid","fieldReference","fieldError","validateField","getValues","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","handleChange","shouldSkipValidation","deps","skipValidation","isWatched","previousErrorLookupResult","errorLookupResult","fieldNames","executeSchemaAndUpdateState","Promise","all","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","live","_updateFieldArray","method","shouldSetValues","shouldSetFields","argA","argB","_getFieldArray","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","info","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","resetField","clearErrors","inputName","setError","setFocus","render","Provider","children","setFields","mapIds","_actioned","fieldArrayName","updateValues","useCallback","updatedFieldArrayValuesWithKey","updatedFieldArrayValues","omitKeys","watchField","then","swap","mapCurrentIds","swapArrayAt","move","moveArrayAt","prependAt","fillEmptyArray","getFocusFieldName","appendValue","appendAt","remove","removeArrayAt","insertAt","update","updateAt","_formControl"],"mappings":"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"}